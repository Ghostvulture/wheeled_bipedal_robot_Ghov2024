<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Gimbal\Gimbal.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Gimbal\Gimbal.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Sep 14 22:40:32 2024
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; BMI088::update() &rArr; BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">CAN2_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7c]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[2e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM2_IRQHandler</a> from bsp_tim.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">USART3_IRQHandler</a> from bsp_usart.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z24USBD_FS_DeviceDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z27USBD_FS_ConfigStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[d]">USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z27USBD_FS_LangIDStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z27USBD_FS_SerialStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[f]">USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z28USBD_FS_ProductStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z30USBD_FS_InterfaceStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z33USBD_FS_ManufacturerStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[21]">USBD_CDC_GetDeviceQualifierDescriptor(unsigned short*)</a> from usbd_cdc.o(i._Z37USBD_CDC_GetDeviceQualifierDescriptorPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[93]">GMMotorHandler::~GMMotorHandler()</a> from gmmotorhandler.o(i._ZN14GMMotorHandlerD1Ev) referenced from bsp_can.o(i._ZN14GMMotorHandler8instanceEv)
 <LI><a href="#[93]">GMMotorHandler::~GMMotorHandler()</a> from gmmotorhandler.o(i._ZN14GMMotorHandlerD1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[94]">LKMotorHandler::~LKMotorHandler()</a> from lkmotorhandler.o(i._ZN14LKMotorHandlerD1Ev) referenced from bsp_can.o(i._ZN14LKMotorHandler8instanceEv)
 <LI><a href="#[94]">LKMotorHandler::~LKMotorHandler()</a> from lkmotorhandler.o(i._ZN14LKMotorHandlerD1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[9c]">GimbalController::~GimbalController()</a> from main.o(i._ZN16GimbalControllerD1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[9e]">BalanceController::run()</a> from balancecontroller.o(i._ZN17BalanceController3runEv) referenced from balancecontroller.o(.constdata__ZTV17BalanceController)
 <LI><a href="#[9d]">BalanceController::~BalanceController()</a> from main.o(i._ZN17BalanceControllerD1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[a3]">BalanceStateRelax::run()</a> from balancestaterelax.o(i._ZN17BalanceStateRelax3runEv) referenced from balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
 <LI><a href="#[a2]">BalanceStateRelax::exit()</a> from balancestaterelax.o(i._ZN17BalanceStateRelax4exitEv) referenced from balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
 <LI><a href="#[9f]">BalanceStateRelax::init()</a> from balancestaterelax.o(i._ZN17BalanceStateRelax4initEv) referenced from balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
 <LI><a href="#[a0]">BalanceStateRelax::enter()</a> from balancestaterelax.o(i._ZN17BalanceStateRelax5enterEv) referenced from balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
 <LI><a href="#[a1]">BalanceStateRelax::execute()</a> from balancestaterelax.o(i._ZN17BalanceStateRelax7executeEv) referenced from balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
 <LI><a href="#[95]">BoardConnectivity::~BoardConnectivity()</a> from boardconnectivity.o(i._ZN17BoardConnectivityD1Ev) referenced from chassisstaterelax.o(i._ZN17BoardConnectivity8instanceEv)
 <LI><a href="#[95]">BoardConnectivity::~BoardConnectivity()</a> from boardconnectivity.o(i._ZN17BoardConnectivityD1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[9b]">ChassisController::~ChassisController()</a> from main.o(i._ZN17ChassisControllerD1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[a4]">ChassisStateRelax::init()</a> from chassisstaterelax.o(i._ZN17ChassisStateRelax4initEv) referenced from chassisstaterelax.o(.constdata__ZTV17ChassisStateRelax)
 <LI><a href="#[96]">ShooterController::~ShooterController()</a> from main.o(i._ZN17ShooterControllerD1Ev) referenced from main.o(i._ZN17ShooterController8instanceEv)
 <LI><a href="#[a9]">BalanceStandControl::run()</a> from balancestandcontrol.o(i._ZN19BalanceStandControl3runEv) referenced from balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
 <LI><a href="#[a8]">BalanceStandControl::exit()</a> from balancestandcontrol.o(i._ZN19BalanceStandControl4exitEv) referenced from balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
 <LI><a href="#[a5]">BalanceStandControl::init()</a> from balancestandcontrol.o(i._ZN19BalanceStandControl4initEv) referenced from balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
 <LI><a href="#[a6]">BalanceStandControl::enter()</a> from balancestandcontrol.o(i._ZN19BalanceStandControl5enterEv) referenced from balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
 <LI><a href="#[a7]">BalanceStandControl::execute()</a> from balancestandcontrol.o(i._ZN19BalanceStandControl7executeEv) referenced from balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
 <LI><a href="#[ae]">BalanceRemoteControl::run()</a> from balanceremotecontrol.o(i._ZN20BalanceRemoteControl3runEv) referenced from balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
 <LI><a href="#[ad]">BalanceRemoteControl::exit()</a> from balanceremotecontrol.o(i._ZN20BalanceRemoteControl4exitEv) referenced from balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
 <LI><a href="#[aa]">BalanceRemoteControl::init()</a> from balanceremotecontrol.o(i._ZN20BalanceRemoteControl4initEv) referenced from balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
 <LI><a href="#[ab]">BalanceRemoteControl::enter()</a> from balanceremotecontrol.o(i._ZN20BalanceRemoteControl5enterEv) referenced from balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
 <LI><a href="#[ac]">BalanceRemoteControl::execute()</a> from balanceremotecontrol.o(i._ZN20BalanceRemoteControl7executeEv) referenced from balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
 <LI><a href="#[18]">[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC13USBD_CDC_InitEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1a]">[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC14USBD_CDC_SetupEP19_USBD_HandleTypeDefP13usb_setup_req) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1c]">[local to usbd_cdc_c]::USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DataInEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[19]">[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DeInitEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1d]">[local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC16USBD_CDC_DataOutEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1b]">[local to usbd_cdc_c]::USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC20USBD_CDC_EP0_RxReadyEP19_USBD_HandleTypeDef) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1f]">[local to usbd_cdc_c]::USBD_CDC_GetFSCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetFSCfgDescEPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1e]">[local to usbd_cdc_c]::USBD_CDC_GetHSCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetHSCfgDescEPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[20]">[local to usbd_cdc_c]::USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC29USBD_CDC_GetOtherSpeedCfgDescEPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[13]">[local to usbd_cdc_if_c]::CDC_Init_FS()</a> from usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01611CDC_Init_FSEv) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[14]">[local to usbd_cdc_if_c]::CDC_DeInit_FS()</a> from usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01613CDC_DeInit_FSEv) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[15]">[local to usbd_cdc_if_c]::CDC_Control_FS(unsigned char, unsigned char*, unsigned short)</a> from usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01614CDC_Control_FSEhPht) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[16]">[local to usbd_cdc_if_c]::CDC_Receive_FS(unsigned char*, unsigned*)</a> from usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01614CDC_Receive_FSEPhPj) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[17]">[local to usbd_cdc_if_c]::CDC_TransmitCplt_FS(unsigned char*, unsigned*, unsigned char)</a> from usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01619CDC_TransmitCplt_FSEPhPjh) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[91]">[local to QuaternionEKF_c]::IMU_QuaternionEKF_SetH(kf_t*)</a> from quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af22IMU_QuaternionEKF_SetHEP4kf_t) referenced from quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
 <LI><a href="#[8f]">[local to QuaternionEKF_c]::IMU_QuaternionEKF_Observe(kf_t*)</a> from quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af25IMU_QuaternionEKF_ObserveEP4kf_t) referenced from quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
 <LI><a href="#[92]">[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)</a> from quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af28IMU_QuaternionEKF_xhatUpdateEP4kf_t) referenced from quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
 <LI><a href="#[90]">[local to QuaternionEKF_c]::IMU_QuaternionEKF_F_Linearization_P_Fading(kf_t*)</a> from quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af42IMU_QuaternionEKF_F_Linearization_P_FadingEP4kf_t) referenced from quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
 <LI><a href="#[81]">[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[81]">[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[81]">[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[83]">[local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_RxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[8d]">[local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_TxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[82]">[local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_RxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[8c]">[local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_TxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[80]">[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[80]">[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[8b]">[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMATransmitCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[88]">[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesRxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[89]">[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesTxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[86]">[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesRxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[87]">[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesTxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[7f]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[7f]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[8a]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd23SPI_DMAHalfTransmitCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[85]">[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_DMATransmitReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[84]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd30SPI_DMAHalfTransmitReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[8e]">[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[98]">AHRS::~AHRS()</a> from main.o(i._ZN4AHRSD1Ev) referenced from main.o(i._ZN4AHRS8instanceEv)
 <LI><a href="#[97]">Dr16::~Dr16()</a> from dr16.o(i._ZN4Dr16D1Ev) referenced from balancestandcontrol.o(i._ZN19BalanceStandControl5enterEv)
 <LI><a href="#[97]">Dr16::~Dr16()</a> from dr16.o(i._ZN4Dr16D1Ev) referenced from balanceremotecontrol.o(i._ZN20BalanceRemoteControl5enterEv)
 <LI><a href="#[97]">Dr16::~Dr16()</a> from dr16.o(i._ZN4Dr16D1Ev) referenced from gimbalcontroller.o(i._ZN4Dr168instanceEv)
 <LI><a href="#[97]">Dr16::~Dr16()</a> from dr16.o(i._ZN4Dr16D1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[99]">BMI088::~BMI088()</a> from bmi088.o(i._ZN6BMI088D1Ev) referenced from ahrs.o(i._ZN6BMI0888instanceEv)
 <LI><a href="#[99]">BMI088::~BMI088()</a> from bmi088.o(i._ZN6BMI088D1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[af]">GM2006::setOutput()</a> from gm2006.o(i._ZN6GM20069setOutputEv) referenced from gm2006.o(.constdata__ZTV6GM2006)
 <LI><a href="#[b0]">GM3508::setOutput()</a> from gm3508.o(i._ZN6GM35089setOutputEv) referenced from gm3508.o(.constdata__ZTV6GM3508)
 <LI><a href="#[b1]">GM6020::setOutput()</a> from gm6020.o(i._ZN6GM60209setOutputEv) referenced from gm6020.o(.constdata__ZTV6GM6020)
 <LI><a href="#[b2]">LK9025::setOutput()</a> from lk9025.o(i._ZN6LK90259setOutputEv) referenced from lk9025.o(.constdata__ZTV6LK9025)
 <LI><a href="#[9a]">IST8310::~IST8310()</a> from ist8310.o(i._ZN7IST8310D1Ev) referenced from main.o(i.__sti___6_main_c_29f4d46e)
 <LI><a href="#[b6]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[b4]">__sti___18_GimbalStateFPS_cpp_db872dfd</a> from gimbalstatefps.o(i.__sti___18_GimbalStateFPS_cpp_db872dfd) referenced from gimbalstatefps.o(.init_array)
 <LI><a href="#[b5]">__sti___24_BalanceRemoteControl_cpp_124ac066</a> from balanceremotecontrol.o(i.__sti___24_BalanceRemoteControl_cpp_124ac066) referenced from balanceremotecontrol.o(.init_array)
 <LI><a href="#[b3]">__sti___6_main_c_29f4d46e</a> from main.o(i.__sti___6_main_c_29f4d46e) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b6]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[297]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[298]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[299]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[29a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[29b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[29c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[29d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[29e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[29f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2a0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2a2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2a4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2a5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2a6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2a7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2a9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2aa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2ab]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2ac]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2ad]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2ae]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2af]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2b0]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2b1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2b2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2b3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[2b4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[2b5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2b6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2b7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2b9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ba]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[cb]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2bc]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cd]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[d0]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::~BoardConnectivity()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[2bd]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
</UL>

<P><STRONG><a name="[d3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2be]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_Observe(kf_t*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure(kf_t*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to kalman_filter_c]::H_K_R_Adjustment(kf_t*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init(float*, float, float, float, float, float)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2c2]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_SetH(kf_t*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure(kf_t*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to kalman_filter_c]::H_K_R_Adjustment(kf_t*)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[2c3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2c5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[ce]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d2]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[2c6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[be]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[da]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[dd]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[c1]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[2c8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2ca]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[de]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[cc]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2cc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[df]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e4]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1ea]"></a>arm_mat_add_f32</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, arm_mat_add_f32.o(.text.arm_mat_add_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate(kf_t*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate(kf_t*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate(kf_t*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK(kf_t*)
</UL>

<P><STRONG><a name="[1e6]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_mat_init_f32.o(.text.arm_mat_init_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init(float*, float, float, float, float, float)
</UL>

<P><STRONG><a name="[e5]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 756 bytes, Stack size 104 bytes, arm_mat_inverse_f32.o(.text.arm_mat_inverse_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK(kf_t*)
</UL>

<P><STRONG><a name="[1e9]"></a>arm_mat_mult_f32</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, arm_mat_mult_f32.o(.text.arm_mat_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate(kf_t*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate(kf_t*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate(kf_t*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update(kf_t*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK(kf_t*)
</UL>

<P><STRONG><a name="[1f6]"></a>arm_mat_sub_f32</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, arm_mat_sub_f32.o(.text.arm_mat_sub_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate(kf_t*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update(kf_t*)
</UL>

<P><STRONG><a name="[1e8]"></a>arm_mat_trans_f32</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, arm_mat_trans_f32.o(.text.arm_mat_trans_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate(kf_t*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK(kf_t*)
</UL>

<P><STRONG><a name="[26]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CAN2_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART3_UART_Init()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM5_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM2_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI1_Init()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_I2C3_Init()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CAN2_Init()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CAN1_Init()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CRC_Init()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init()
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 330 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sendData(CAN_HandleTypeDef*, unsigned, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init()
</UL>

<P><STRONG><a name="[f5]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sendData(CAN_HandleTypeDef*, unsigned, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[e7]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CAN2_Init()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CAN1_Init()
</UL>

<P><STRONG><a name="[f7]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, bsp_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init()
</UL>

<P><STRONG><a name="[ea]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_CRC_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CRC_Init()
</UL>

<P><STRONG><a name="[103]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_DMA_Abort</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[10a]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[f9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ALL_ON()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init()
</UL>

<P><STRONG><a name="[f8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>

<P><STRONG><a name="[10b]"></a>HAL_I2C_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_I2C3_Init()
</UL>

<P><STRONG><a name="[10e]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 762 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[112]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writeData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10c]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[116]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_DMA_Init()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[fa]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_DMA_Init()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[117]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1be]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[123]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[129]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[12b]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[12d]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[132]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[133]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1738 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = HAL_PCD_IRQHandler &rArr; [local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_PCD_Init</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[15a]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[15c]"></a>HAL_PCD_Start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[143]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[146]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[162]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[161]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[164]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[24e]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[165]"></a>HAL_SPI_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI1_Init()
</UL>

<P><STRONG><a name="[166]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_SPI_Receive</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[16a]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[16c]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[251]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[256]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[16e]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[168]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[16b]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[16d]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[170]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[1db]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SPI_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>

<P><STRONG><a name="[252]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[257]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[254]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[258]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSystickIT()
</UL>

<P><STRONG><a name="[11a]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[17e]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[23a]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM5_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM2_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM5_Init()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM2_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[286]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM5_Init()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM2_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[17a]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
</UL>

<P><STRONG><a name="[17b]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[189]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start(TIM_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[17d]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[192]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[18e]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_UART_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; [local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART3_UART_Init()
</UL>

<P><STRONG><a name="[197]"></a>HAL_UART_MspInit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[259]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[25a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; [local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SysTick_Handler &rArr; BMI088::update() &rArr; BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateData()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>TIM2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_tim.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TIM2_IRQHandler &rArr; AHRS::AHRS_Update() &rArr; IMU_QuaternionEKF_Update(float, float, float, float, float, float, float) &rArr; Kalman_Filter_Update(kf_t*) &rArr; Kalman_Filter_SetK(kf_t*) &rArr; arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[18d]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[175]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[184]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[53]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_remote_control_data()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_if_c]::CDC_Receive_FS(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[19c]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[246]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_if_c]::CDC_Receive_FS(unsigned char*, unsigned*)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_if_c]::CDC_Init_FS()
</UL>

<P><STRONG><a name="[245]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_if_c]::CDC_Init_FS()
</UL>

<P><STRONG><a name="[247]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1b8]"></a>USBD_CoreFindEP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindEP))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1ba]"></a>USBD_CoreFindIF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindIF))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1a7]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1a8]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1aa]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1ac]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1ae]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1af]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1b0]"></a>USBD_GetEpDesc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, usbd_core.o(i.USBD_GetEpDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_GetHSCfgDesc(unsigned short*)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_GetFSCfgDesc(unsigned short*)
</UL>

<P><STRONG><a name="[1b1]"></a>USBD_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>

<P><STRONG><a name="[1b2]"></a>USBD_GetString</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetLen(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
</UL>

<P><STRONG><a name="[19a]"></a>USBD_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[120]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[122]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[11e]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[124]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1bb]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[1b4]"></a>USBD_LL_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1cd]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[14a]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[14b]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[1bf]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[1a6]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_Reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[156]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[157]"></a>USBD_LL_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[154]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1c0]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[15b]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_LL_StallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[1c5]"></a>USBD_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[15f]"></a>USBD_LL_Suspend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1a9]"></a>USBD_LL_Transmit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>

<P><STRONG><a name="[1c1]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[19b]"></a>USBD_RegisterClass</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1b9]"></a>USBD_RunTestMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[248]"></a>USBD_SetClassConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[19d]"></a>USBD_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1c2]"></a>USBD_StdDevReq</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_StdEPReq</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c3]"></a>USBD_StdItfReq</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[243]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[242]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[12c]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[144]"></a>USB_ActivateSetup</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>USB_CoreInit</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_CoreInit &rArr; [local to stm32f4xx_ll_usb_c]::USB_CoreReset(USB_OTG_GlobalTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_ll_usb_c]::USB_CoreReset(USB_OTG_GlobalTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[128]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[15e]"></a>USB_DevConnect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[152]"></a>USB_DevDisconnect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[151]"></a>USB_DevInit</STRONG> (Thumb, 480 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[14e]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[131]"></a>USB_EP0_OutStart</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>USB_EPClearStall</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[130]"></a>USB_EPSetStall</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[12e]"></a>USB_EPStartXfer</STRONG> (Thumb, 944 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[126]"></a>USB_EPStopXfer</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[15d]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1d0]"></a>USB_FlushRxFifo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[13e]"></a>USB_FlushTxFifo</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>USB_GetDevSpeed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>USB_ReadInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>USB_ReadPacket</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>USB_SetCurrentMode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[159]"></a>USB_SetDevAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1cf]"></a>USB_SetDevSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[147]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>USB_WritePacket</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[27]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>LED_ALL_ON()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(i._Z10LED_ALL_ONv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ALL_ON()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>usart3_init(unsigned char*, unsigned char*, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, bsp_usart.o(i._Z11usart3_initPhS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart3_init(unsigned char*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init()
</UL>

<P><STRONG><a name="[1d4]"></a>can_sendData(CAN_HandleTypeDef*, unsigned, unsigned char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, bsp_can.o(i._Z12can_sendDataP17CAN_HandleTypeDefjPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = can_sendData(CAN_HandleTypeDef*, unsigned, unsigned char*, unsigned short) &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1d7]"></a>iic_readData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, bsp_iic.o(i._Z12iic_readDataP17I2C_HandleTypeDeftttPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iic_readData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::readReg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1d8]"></a>spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bsp_spi.o(i._Z12spi_readDataP19__SPI_HandleTypeDefPhh13SPI_WORK_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1da]"></a>spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bsp_spi.o(i._Z12spi_sendDataP19__SPI_HandleTypeDefPhh13SPI_WORK_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_IT
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1dc]"></a>DWT_GetDeltaT(unsigned*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_dwt.o(i._Z13DWT_GetDeltaTPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DWT_GetDeltaT(unsigned*) &rArr; [local to bsp_dwt_c]::DWT_CNT_Update()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_dwt_c]::DWT_CNT_Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[1de]"></a>iic_writeData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, bsp_iic.o(i._Z13iic_writeDataP17I2C_HandleTypeDeftttPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iic_writeData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Write &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::wirteReg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1df]"></a>EnableSystickIT()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i._Z15EnableSystickITv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnableSystickIT()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>can_filter_init()</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, bsp_can.o(i._Z15can_filter_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = can_filter_init() &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init()
</UL>

<P><STRONG><a name="[276]"></a>PWM_SetDutyRatio(TIM_HandleTypeDef*, float, unsigned)</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, bsp_pwm.o(i._Z16PWM_SetDutyRatioP17TIM_HandleTypeDeffj))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::TemperatureControl(float)
</UL>

<P><STRONG><a name="[1e4]"></a>Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1800 bytes, Stack size 32 bytes, kalman_filter.o(i._Z18Kalman_Filter_InitP4kf_thhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init(float*, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1e7]"></a>Kalman_Filter_SetK(kf_t*)</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, kalman_filter.o(i._Z18Kalman_Filter_SetKP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Kalman_Filter_SetK(kf_t*) &rArr; arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
</UL>

<P><STRONG><a name="[1eb]"></a>SystemClock_Config()</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>USBD_Get_USB_Status(HAL_StatusTypeDef)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_conf.o(i._Z19USBD_Get_USB_Status17HAL_StatusTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1ec]"></a>remote_control_init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, remotecontrol.o(i._Z19remote_control_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remote_control_init() &rArr; usart3_init(unsigned char*, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init(unsigned char*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>Kalman_Filter_Update(kf_t*)</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, kalman_filter.o(i._Z20Kalman_Filter_UpdateP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Kalman_Filter_Update(kf_t*) &rArr; Kalman_Filter_SetK(kf_t*) &rArr; arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate(kf_t*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate(kf_t*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate(kf_t*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update(kf_t*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure(kf_t*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK(kf_t*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1ef]"></a>Kalman_Filter_Measure(kf_t*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, kalman_filter.o(i._Z21Kalman_Filter_MeasureP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Kalman_Filter_Measure(kf_t*) &rArr; [local to kalman_filter_c]::H_K_R_Adjustment(kf_t*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to kalman_filter_c]::H_K_R_Adjustment(kf_t*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
</UL>

<P><STRONG><a name="[1f5]"></a>IMU_QuaternionEKF_Init(float*, float, float, float, float, float)</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IMU_QuaternionEKF_Init(float*, float, float, float, float, float) &rArr; Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init(kf_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
</UL>

<P><STRONG><a name="[1f3]"></a>Kalman_Filter_P_Update(kf_t*)</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, kalman_filter.o(i._Z22Kalman_Filter_P_UpdateP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Kalman_Filter_P_Update(kf_t*) &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
</UL>

<P><STRONG><a name="[268]"></a>get_remote_control_raw()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, remotecontrol.o(i._Z22get_remote_control_rawv))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
</UL>

<P><STRONG><a name="[1f7]"></a>IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)</STRONG> (Thumb, 1524 bytes, Stack size 40 bytes, quaternionekf.o(i._Z24IMU_QuaternionEKF_Updatefffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = IMU_QuaternionEKF_Update(float, float, float, float, float, float, float) &rArr; Kalman_Filter_Update(kf_t*) &rArr; Kalman_Filter_SetK(kf_t*) &rArr; arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::invSqrt(float)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[1f2]"></a>Kalman_Filter_xhatUpdate(kf_t*)</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, kalman_filter.o(i._Z24Kalman_Filter_xhatUpdateP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Kalman_Filter_xhatUpdate(kf_t*) &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
</UL>

<P><STRONG><a name="[c]"></a>USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i._Z24USBD_FS_DeviceDescriptor17USBD_SpeedTypeDefPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1f1]"></a>Kalman_Filter_PminusUpdate(kf_t*)</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, kalman_filter.o(i._Z26Kalman_Filter_PminusUpdateP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Kalman_Filter_PminusUpdate(kf_t*) &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
</UL>

<P><STRONG><a name="[11]"></a>USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i._Z27USBD_FS_ConfigStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i._Z27USBD_FS_LangIDStrDescriptor17USBD_SpeedTypeDefPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_desc.o(i._Z27USBD_FS_SerialStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; [local to usbd_desc_c]::Get_SerialNum() &rArr; [local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_desc_c]::Get_SerialNum()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1a4]"></a>process_remote_control_data()</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, remotecontrol.o(i._Z27process_remote_control_datav))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = process_remote_control_data()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to remoteControl_c]::SBUS_TO_RC(const volatile unsigned char*, RC_ctrl_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[f]"></a>USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i._Z28USBD_FS_ProductStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1f0]"></a>Kalman_Filter_xhatMinusUpdate(kf_t*)</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, kalman_filter.o(i._Z29Kalman_Filter_xhatMinusUpdateP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Kalman_Filter_xhatMinusUpdate(kf_t*) &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update(kf_t*)
</UL>

<P><STRONG><a name="[12]"></a>USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i._Z30USBD_FS_InterfaceStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i._Z33USBD_FS_ManufacturerStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_CDC_GetDeviceQualifierDescriptor(unsigned short*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z37USBD_CDC_GetDeviceQualifierDescriptorPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>Sqrt(float)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, user_lib.o(i._Z4Sqrtf))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norm3d(float*)
</UL>

<P><STRONG><a name="[260]"></a>Dot3d(float*, float*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, user_lib.o(i._Z5Dot3dPfS_))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[1fd]"></a>Norm3d(float*)</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, user_lib.o(i._Z6Norm3dPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Norm3d(float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[261]"></a>Cross3d(float*, float*, float*)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, user_lib.o(i._Z7Cross3dPfS_S_))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[1ff]"></a>DWT_Init(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_dwt.o(i._Z8DWT_Initj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DWT_Init(unsigned) &rArr; [local to bsp_dwt_c]::DWT_CNT_Update()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_dwt_c]::DWT_CNT_Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init()
</UL>

<P><STRONG><a name="[200]"></a>bsp_init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i._Z8bsp_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_init() &rArr; can_filter_init() &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25f]"></a>DWT_Delay(float)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_dwt.o(i._Z9DWT_Delayf))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_CONF_INIT()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[202]"></a>PWM_Start(TIM_HandleTypeDef*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bsp_pwm.o(i._Z9PWM_StartP17TIM_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_Start(TIM_HandleTypeDef*, unsigned) &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[201]"></a>gpio_init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_gpio.o(i._Z9gpio_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init()
</UL>

<P><STRONG><a name="[20f]"></a>Controller::Controller__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN10ControllerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
</UL>

<P><STRONG><a name="[211]"></a>StateMachine::StateMachine()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN12StateMachineC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl(LK9025*, LK9025*, Odometer*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
</UL>

<P><STRONG><a name="[2cf]"></a>StateMachine::StateMachine__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN12StateMachineC1Ev), UNUSED)

<P><STRONG><a name="[20d]"></a>GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, gmmotorhandler.o(i._ZN14GMMotorHandler13registerMotorEP7GMMotorP17CAN_HandleTypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>

<P><STRONG><a name="[fe]"></a>GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)</STRONG> (Thumb, 280 bytes, Stack size 20 bytes, gmmotorhandler.o(i._ZN14GMMotorHandler14processRawDataEP17CAN_HandleTypeDefPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::updateFeedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[203]"></a>GMMotorHandler::updateFeedback()</STRONG> (Thumb, 528 bytes, Stack size 0 bytes, gmmotorhandler.o(i._ZN14GMMotorHandler14updateFeedbackEv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>

<P><STRONG><a name="[fd]"></a>GMMotorHandler::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_can.o(i._ZN14GMMotorHandler8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GMMotorHandler::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::GMMotorHandler()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[205]"></a>GMMotorHandler::GMMotorHandler()</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, gmmotorhandler.o(i._ZN14GMMotorHandlerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
</UL>

<P><STRONG><a name="[2d0]"></a>GMMotorHandler::GMMotorHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gmmotorhandler.o(i._ZN14GMMotorHandlerC1Ev), UNUSED)

<P><STRONG><a name="[93]"></a>GMMotorHandler::~GMMotorHandler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gmmotorhandler.o(i._ZN14GMMotorHandlerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
<LI> bsp_can.o(i._ZN14GMMotorHandler8instanceEv)
</UL>
<P><STRONG><a name="[2d1]"></a>GMMotorHandler::~GMMotorHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gmmotorhandler.o(i._ZN14GMMotorHandlerD1Ev), UNUSED)

<P><STRONG><a name="[215]"></a>LKMotorHandler::registerMotor(LKMotor*, CAN_HandleTypeDef*, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lkmotorhandler.o(i._ZN14LKMotorHandler13registerMotorEP7LKMotorP17CAN_HandleTypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LKMotorHandler::registerMotor(LKMotor*, CAN_HandleTypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
</UL>

<P><STRONG><a name="[100]"></a>LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lkmotorhandler.o(i._ZN14LKMotorHandler14processRawDataEP17CAN_HandleTypeDefPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::updateFeedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[206]"></a>LKMotorHandler::updateFeedback()</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, lkmotorhandler.o(i._ZN14LKMotorHandler14updateFeedbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LoopFloatConstrain(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>

<P><STRONG><a name="[1a1]"></a>LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*)</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lkmotorhandler.o(i._ZN14LKMotorHandler15sendControlDataEP17CAN_HandleTypeDefS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*) &rArr; can_sendData(CAN_HandleTypeDef*, unsigned, unsigned char*, unsigned short) &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sendData(CAN_HandleTypeDef*, unsigned, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ff]"></a>LKMotorHandler::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_can.o(i._ZN14LKMotorHandler8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LKMotorHandler::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::LKMotorHandler()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[208]"></a>LKMotorHandler::LKMotorHandler()</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lkmotorhandler.o(i._ZN14LKMotorHandlerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
</UL>

<P><STRONG><a name="[2d2]"></a>LKMotorHandler::LKMotorHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lkmotorhandler.o(i._ZN14LKMotorHandlerC1Ev), UNUSED)

<P><STRONG><a name="[94]"></a>LKMotorHandler::~LKMotorHandler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lkmotorhandler.o(i._ZN14LKMotorHandlerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
<LI> bsp_can.o(i._ZN14LKMotorHandler8instanceEv)
</UL>
<P><STRONG><a name="[2d3]"></a>LKMotorHandler::~LKMotorHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lkmotorhandler.o(i._ZN14LKMotorHandlerD1Ev), UNUSED)

<P><STRONG><a name="[209]"></a>GimbalController::init()</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gimbalcontroller.o(i._ZN16GimbalController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GimbalController::init() &rArr; GMMotorHandler::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::setOutput()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20e]"></a>GimbalController::GimbalController()</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, main.o(i._ZN16GimbalControllerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GimbalController::GimbalController() &rArr; GM6020::GM6020() &rArr; GMMotor::GMMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::GM6020()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
</UL>

<P><STRONG><a name="[2d4]"></a>GimbalController::GimbalController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN16GimbalControllerC1Ev), UNUSED)

<P><STRONG><a name="[9c]"></a>GimbalController::~GimbalController()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i._ZN16GimbalControllerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GimbalController::~GimbalController()
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::~GM6020()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
</UL>
<P><STRONG><a name="[2d5]"></a>GimbalController::~GimbalController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN16GimbalControllerD1Ev), UNUSED)

<P><STRONG><a name="[9e]"></a>BalanceController::run()</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, balancecontroller.o(i._ZN17BalanceController3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BalanceController::run() &rArr; BalanceStandControl::init() &rArr; Odometer::Odometer(LKMotor&, LKMotor&)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::run()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::run()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::init()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::run()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancecontroller.o(.constdata__ZTV17BalanceController)
</UL>
<P><STRONG><a name="[214]"></a>BalanceController::init()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, balancecontroller.o(i._ZN17BalanceController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BalanceController::init() &rArr; LKMotorHandler::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::registerMotor(LKMotor*, CAN_HandleTypeDef*, unsigned short)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::setOutput()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[216]"></a>BalanceController::BalanceController()</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, main.o(i._ZN17BalanceControllerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BalanceController::BalanceController() &rArr; BalanceStandControl::BalanceStandControl(LK9025*, LK9025*, Odometer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::LK9025()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::Odometer(LKMotor&, LKMotor&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl(LK9025*, LK9025*, Odometer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
</UL>

<P><STRONG><a name="[2d6]"></a>BalanceController::BalanceController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN17BalanceControllerC1Ev), UNUSED)

<P><STRONG><a name="[9d]"></a>BalanceController::~BalanceController()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i._ZN17BalanceControllerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BalanceController::~BalanceController()
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::~LK9025()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
</UL>
<P><STRONG><a name="[2d7]"></a>BalanceController::~BalanceController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN17BalanceControllerD1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>BalanceStateRelax::run()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, balancestaterelax.o(i._ZN17BalanceStateRelax3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BalanceStateRelax::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[a2]"></a>BalanceStateRelax::exit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, balancestaterelax.o(i._ZN17BalanceStateRelax4exitEv))
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[9f]"></a>BalanceStateRelax::init()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, balancestaterelax.o(i._ZN17BalanceStateRelax4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BalanceStateRelax::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[a0]"></a>BalanceStateRelax::enter()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, balancestaterelax.o(i._ZN17BalanceStateRelax5enterEv))
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[a1]"></a>BalanceStateRelax::execute()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, balancestaterelax.o(i._ZN17BalanceStateRelax7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BalanceStateRelax::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.constdata__ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[21d]"></a>BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, boardconnectivity.o(i._ZN17BoardConnectivity28BoardConnectivity_Add2MemoryEPhttNS_21BoardConnectivityTypeENS_26BoardConnectivityDirectionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>

<P><STRONG><a name="[224]"></a>BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)</STRONG> (Thumb, 12 bytes, Stack size 20 bytes, boardconnectivity.o(i._ZN17BoardConnectivity28BoardConnectivity_Float2ByteEfPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>

<P><STRONG><a name="[221]"></a>BoardConnectivity::init()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, boardconnectivity.o(i._ZN17BoardConnectivity4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BoardConnectivity::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>BoardConnectivity::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, chassisstaterelax.o(i._ZN17BoardConnectivity8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BoardConnectivity::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>

<P><STRONG><a name="[220]"></a>BoardConnectivity::BoardConnectivity()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, boardconnectivity.o(i._ZN17BoardConnectivityC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BoardConnectivity::BoardConnectivity() &rArr; BoardConnectivity::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>

<P><STRONG><a name="[2d8]"></a>BoardConnectivity::BoardConnectivity__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, boardconnectivity.o(i._ZN17BoardConnectivityC1Ev), UNUSED)

<P><STRONG><a name="[95]"></a>BoardConnectivity::~BoardConnectivity()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, boardconnectivity.o(i._ZN17BoardConnectivityD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BoardConnectivity::~BoardConnectivity() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
<LI> chassisstaterelax.o(i._ZN17BoardConnectivity8instanceEv)
</UL>
<P><STRONG><a name="[2d9]"></a>BoardConnectivity::~BoardConnectivity__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, boardconnectivity.o(i._ZN17BoardConnectivityD1Ev), UNUSED)

<P><STRONG><a name="[222]"></a>ChassisController::init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN17ChassisController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
</UL>

<P><STRONG><a name="[223]"></a>ChassisController::ChassisController()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, main.o(i._ZN17ChassisControllerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ChassisController::ChassisController() &rArr; ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
</UL>

<P><STRONG><a name="[2da]"></a>ChassisController::ChassisController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN17ChassisControllerC1Ev), UNUSED)

<P><STRONG><a name="[9b]"></a>ChassisController::~ChassisController()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i._ZN17ChassisControllerD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
</UL>
<P><STRONG><a name="[2db]"></a>ChassisController::~ChassisController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN17ChassisControllerD1Ev), UNUSED)

<P><STRONG><a name="[a4]"></a>ChassisStateRelax::init()</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, chassisstaterelax.o(i._ZN17ChassisStateRelax4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ChassisStateRelax::init() &rArr; BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.constdata__ZTV17ChassisStateRelax)
</UL>
<P><STRONG><a name="[225]"></a>ShooterController::init()</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, shootercontroller.o(i._ZN17ShooterController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ShooterController::init() &rArr; GMMotorHandler::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::setOutput()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::setOutput()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>ShooterController::instance()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i._ZN17ShooterController8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShooterController::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::GM3508()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::GM2006()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
</UL>

<P><STRONG><a name="[96]"></a>ShooterController::~ShooterController()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i._ZN17ShooterControllerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ShooterController::~ShooterController()
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::~GM3508()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::~GM2006()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN17ShooterController8instanceEv)
</UL>
<P><STRONG><a name="[2dc]"></a>ShooterController::~ShooterController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN17ShooterControllerD1Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>BalanceStandControl::run()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, balancestandcontrol.o(i._ZN19BalanceStandControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BalanceStandControl::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[a8]"></a>BalanceStandControl::exit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, balancestandcontrol.o(i._ZN19BalanceStandControl4exitEv))
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[a5]"></a>BalanceStandControl::init()</STRONG> (Thumb, 442 bytes, Stack size 136 bytes, balancestandcontrol.o(i._ZN19BalanceStandControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BalanceStandControl::init() &rArr; Odometer::Odometer(LKMotor&, LKMotor&)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::Odometer(LKMotor&, LKMotor&)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::init()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[a6]"></a>BalanceStandControl::enter()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, balancestandcontrol.o(i._ZN19BalanceStandControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BalanceStandControl::enter() &rArr; AHRS::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[a7]"></a>BalanceStandControl::execute()</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, balancestandcontrol.o(i._ZN19BalanceStandControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BalanceStandControl::execute() &rArr; Odometer::update() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.constdata__ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[21a]"></a>BalanceStandControl::BalanceStandControl(LK9025*, LK9025*, Odometer*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i._ZN19BalanceStandControlC1EP6LK9025S1_P8Odometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BalanceStandControl::BalanceStandControl(LK9025*, LK9025*, Odometer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
</UL>

<P><STRONG><a name="[2dd]"></a>BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*, Odometer*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN19BalanceStandControlC1EP6LK9025S1_P8Odometer), UNUSED)

<P><STRONG><a name="[ae]"></a>BalanceRemoteControl::run()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, balanceremotecontrol.o(i._ZN20BalanceRemoteControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BalanceRemoteControl::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[ad]"></a>BalanceRemoteControl::exit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, balanceremotecontrol.o(i._ZN20BalanceRemoteControl4exitEv))
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[aa]"></a>BalanceRemoteControl::init()</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, balanceremotecontrol.o(i._ZN20BalanceRemoteControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceRemoteControl::init() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[ab]"></a>BalanceRemoteControl::enter()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, balanceremotecontrol.o(i._ZN20BalanceRemoteControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BalanceRemoteControl::enter() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[ac]"></a>BalanceRemoteControl::execute()</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, balanceremotecontrol.o(i._ZN20BalanceRemoteControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceRemoteControl::execute() &rArr; Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.constdata__ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[22d]"></a>Pid::UpdateResult()</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, pid.o(i._ZN3Pid12UpdateResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LimitMax(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::TemperatureControl(float)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::setOutput()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::setOutput()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::setOutput()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::setOutput()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::execute()
</UL>

<P><STRONG><a name="[24b]"></a>Pid::Init()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, pid.o(i._ZN3Pid4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Pid::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[21c]"></a>Pid::Clear()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, pid.o(i._ZN3Pid5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Init()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::init()
</UL>

<P><STRONG><a name="[219]"></a>Pid::Pid()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pid.o(i._ZN3PidC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::Odometer(LKMotor&, LKMotor&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl(LK9025*, LK9025*, Odometer*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object()
</UL>

<P><STRONG><a name="[2de]"></a>Pid::Pid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN3PidC1Ev), UNUSED)

<P><STRONG><a name="[1a3]"></a>AHRS::AHRS_Update()</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, ahrs.o(i._ZN4AHRS11AHRS_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = AHRS::AHRS_Update() &rArr; IMU_QuaternionEKF_Update(float, float, float, float, float, float, float) &rArr; Kalman_Filter_Update(kf_t*) &rArr; Kalman_Filter_SetK(kf_t*) &rArr; arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaT(unsigned*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::EarthFrameToBodyFrame(const float*, float*, float*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::BodyFrameToEarthFrame(const float*, float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>AHRS::InitQuaternion(float*)</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, ahrs.o(i._ZN4AHRS14InitQuaternionEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AHRS::InitQuaternion(float*) &rArr; BMI088::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross3d(float*, float*, float*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norm3d(float*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot3d(float*, float*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
</UL>

<P><STRONG><a name="[25c]"></a>AHRS::BodyFrameToEarthFrame(const float*, float*, float*)</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, ahrs.o(i._ZN4AHRS21BodyFrameToEarthFrameEPKfPfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[25d]"></a>AHRS::EarthFrameToBodyFrame(const float*, float*, float*)</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, ahrs.o(i._ZN4AHRS21EarthFrameToBodyFrameEPKfPfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[264]"></a>AHRS::INS_Init()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ahrs.o(i._ZN4AHRS8INS_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AHRS::INS_Init() &rArr; AHRS::InitQuaternion(float*) &rArr; BMI088::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init(float*, float, float, float, float, float)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaT(unsigned*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>AHRS::instance()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i._ZN4AHRS8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AHRS::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
</UL>

<P><STRONG><a name="[98]"></a>AHRS::~AHRS()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN4AHRSD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN4AHRS8instanceEv)
</UL>
<P><STRONG><a name="[2df]"></a>AHRS::~AHRS__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN4AHRSD1Ev), UNUSED)

<P><STRONG><a name="[19f]"></a>Dr16::updateData()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dr16.o(i._ZN4Dr1610updateDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dr16::updateData() &rArr; Dr16::updateRcStatus()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateKeyStatus()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateRcStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[265]"></a>Dr16::updateRcStatus()</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, dr16.o(i._ZN4Dr1614updateRcStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Dr16::updateRcStatus()
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::mapAvix(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateData()
</UL>

<P><STRONG><a name="[266]"></a>Dr16::updateKeyStatus()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr1615updateKeyStatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateData()
</UL>

<P><STRONG><a name="[267]"></a>Dr16::mapAvix(short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr167mapAvixEs))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateRcStatus()
</UL>

<P><STRONG><a name="[213]"></a>Dr16::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gimbalcontroller.o(i._ZN4Dr168instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Dr16::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>

<P><STRONG><a name="[22c]"></a>Dr16::Dr16()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dr16.o(i._ZN4Dr16C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dr16::Dr16()
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_raw()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::mapAvix(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2e0]"></a>Dr16::Dr16__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dr16.o(i._ZN4Dr16C1Ev), UNUSED)

<P><STRONG><a name="[97]"></a>Dr16::~Dr16()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr16D1Ev))
<BR>[Address Reference Count : 4]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
<LI> balanceremotecontrol.o(i._ZN20BalanceRemoteControl5enterEv)
<LI> balancestandcontrol.o(i._ZN19BalanceStandControl5enterEv)
<LI> gimbalcontroller.o(i._ZN4Dr168instanceEv)
</UL>
<P><STRONG><a name="[2e1]"></a>Dr16::~Dr16__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr16D1Ev), UNUSED)

<P><STRONG><a name="[207]"></a>Math::LoopFloatConstrain(float, float, float)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lkmotorhandler.o(i._ZN4Math18LoopFloatConstrainEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Math::LoopFloatConstrain(float, float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::updateFeedback()
</UL>

<P><STRONG><a name="[24a]"></a>Math::LimitMax(float, float)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pid.o(i._ZN4Math8LimitMaxEff))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>

<P><STRONG><a name="[26a]"></a>BMI088::BMI088_INIT()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, bmi088.o(i._ZN6BMI08811BMI088_INITEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start(TIM_HandleTypeDef*, unsigned)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Init()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyGyroChipID()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_CONF_INIT()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyAccChipID()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyGyroData()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyAccData()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[270]"></a>BMI088::ReadAccData(acc_data_t*)</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, bmi088.o(i._ZN6BMI08811ReadAccDataEP10acc_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BMI088::ReadAccData(acc_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[272]"></a>BMI088::ReadGyroData(gyro_data_t*)</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, bmi088.o(i._ZN6BMI08812ReadGyroDataEP11gyro_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[26e]"></a>BMI088::VerifyAccData()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi088.o(i._ZN6BMI08813VerifyAccDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[26f]"></a>BMI088::VerifyGyroData()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi088.o(i._ZN6BMI08814VerifyGyroDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[273]"></a>BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi088.o(i._ZN6BMI08814WriteDataToRegE13BMI088_SENSORhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay(float)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_CONF_INIT()
</UL>

<P><STRONG><a name="[271]"></a>BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi088.o(i._ZN6BMI08815ReadDataFromRegE13BMI088_SENSORhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccTemperature(float*)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyGyroChipID()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyAccChipID()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadGyroData(gyro_data_t*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccData(acc_data_t*)
</UL>

<P><STRONG><a name="[26c]"></a>BMI088::VerifyAccChipID()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bmi088.o(i._ZN6BMI08815VerifyAccChipIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BMI088::VerifyAccChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[26b]"></a>BMI088::BMI088_CONF_INIT()</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, bmi088.o(i._ZN6BMI08816BMI088_CONF_INITEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BMI088::BMI088_CONF_INIT() &rArr; BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_sendData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay(float)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[26d]"></a>BMI088::VerifyGyroChipID()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bmi088.o(i._ZN6BMI08816VerifyGyroChipIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[274]"></a>BMI088::ReadAccTemperature(float*)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bmi088.o(i._ZN6BMI08818ReadAccTemperatureEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BMI088::ReadAccTemperature(float*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[275]"></a>BMI088::TemperatureControl(float)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bmi088.o(i._ZN6BMI08818TemperatureControlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BMI088::TemperatureControl(float) &rArr; Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDutyRatio(TIM_HandleTypeDef*, float, unsigned)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[1a0]"></a>BMI088::update()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bmi088.o(i._ZN6BMI0886updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BMI088::update() &rArr; BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::TemperatureControl(float)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccTemperature(float*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadGyroData(gyro_data_t*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccData(acc_data_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[25b]"></a>BMI088::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ahrs.o(i._ZN6BMI0888instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BMI088::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[277]"></a>BMI088::BMI088()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bmi088.o(i._ZN6BMI088C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BMI088::BMI088()
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
</UL>

<P><STRONG><a name="[2e2]"></a>BMI088::BMI088__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bmi088.o(i._ZN6BMI088C1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>BMI088::~BMI088()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi088.o(i._ZN6BMI088D1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
<LI> ahrs.o(i._ZN6BMI0888instanceEv)
</UL>
<P><STRONG><a name="[2e3]"></a>BMI088::~BMI088__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bmi088.o(i._ZN6BMI088D1Ev), UNUSED)

<P><STRONG><a name="[af]"></a>GM2006::setOutput()</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, gm2006.o(i._ZN6GM20069setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GM2006::setOutput() &rArr; Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm2006.o(.constdata__ZTV6GM2006)
</UL>
<P><STRONG><a name="[228]"></a>GM2006::GM2006()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, gm2006.o(i._ZN6GM2006C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GM2006::GM2006() &rArr; GMMotor::GMMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
</UL>

<P><STRONG><a name="[2e4]"></a>GM2006::GM2006__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gm2006.o(i._ZN6GM2006C1Ev), UNUSED)

<P><STRONG><a name="[229]"></a>GM2006::~GM2006()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm2006.o(i._ZN6GM2006D1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::~ShooterController()
</UL>

<P><STRONG><a name="[2e5]"></a>GM2006::~GM2006__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gm2006.o(i._ZN6GM2006D1Ev), UNUSED)

<P><STRONG><a name="[b0]"></a>GM3508::setOutput()</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, gm3508.o(i._ZN6GM35089setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GM3508::setOutput() &rArr; Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm3508.o(.constdata__ZTV6GM3508)
</UL>
<P><STRONG><a name="[227]"></a>GM3508::GM3508()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, gm3508.o(i._ZN6GM3508C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GM3508::GM3508() &rArr; GMMotor::GMMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
</UL>

<P><STRONG><a name="[2e6]"></a>GM3508::GM3508__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gm3508.o(i._ZN6GM3508C1Ev), UNUSED)

<P><STRONG><a name="[22a]"></a>GM3508::~GM3508()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm3508.o(i._ZN6GM3508D1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::~ShooterController()
</UL>

<P><STRONG><a name="[2e7]"></a>GM3508::~GM3508__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gm3508.o(i._ZN6GM3508D1Ev), UNUSED)

<P><STRONG><a name="[b1]"></a>GM6020::setOutput()</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, gm6020.o(i._ZN6GM60209setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GM6020::setOutput() &rArr; Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm6020.o(.constdata__ZTV6GM6020)
</UL>
<P><STRONG><a name="[210]"></a>GM6020::GM6020()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, gm6020.o(i._ZN6GM6020C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GM6020::GM6020() &rArr; GMMotor::GMMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController()
</UL>

<P><STRONG><a name="[2e8]"></a>GM6020::GM6020__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gm6020.o(i._ZN6GM6020C1Ev), UNUSED)

<P><STRONG><a name="[212]"></a>GM6020::~GM6020()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm6020.o(i._ZN6GM6020D1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController()
</UL>

<P><STRONG><a name="[2e9]"></a>GM6020::~GM6020__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gm6020.o(i._ZN6GM6020D1Ev), UNUSED)

<P><STRONG><a name="[b2]"></a>LK9025::setOutput()</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, lk9025.o(i._ZN6LK90259setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LK9025::setOutput() &rArr; Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lk9025.o(.constdata__ZTV6LK9025)
</UL>
<P><STRONG><a name="[217]"></a>LK9025::LK9025()</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, lk9025.o(i._ZN6LK9025C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LK9025::LK9025() &rArr; LKMotor::LKMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
</UL>

<P><STRONG><a name="[2ea]"></a>LK9025::LK9025__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lk9025.o(i._ZN6LK9025C1Ev), UNUSED)

<P><STRONG><a name="[21b]"></a>LK9025::~LK9025()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lk9025.o(i._ZN6LK9025D1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController()
</UL>

<P><STRONG><a name="[2eb]"></a>LK9025::~LK9025__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lk9025.o(i._ZN6LK9025D1Ev), UNUSED)

<P><STRONG><a name="[278]"></a>GMMotor::GMMotor__sub_object()</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, gm2006.o(i._ZN7GMMotorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GMMotor::GMMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::GM6020()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::GM3508()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::GM2006()
</UL>

<P><STRONG><a name="[27a]"></a>IST8310::init()</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ist8310.o(i._ZN7IST83104initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IST8310::init() &rArr; IST8310::wirteReg(unsigned char, unsigned char*, unsigned short) &rArr; iic_writeData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Write &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::wirteReg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::readReg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27b]"></a>IST8310::readReg(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ist8310.o(i._ZN7IST83107readRegEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IST8310::readReg(unsigned char, unsigned char*, unsigned short) &rArr; iic_readData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
</UL>

<P><STRONG><a name="[27c]"></a>IST8310::wirteReg(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ist8310.o(i._ZN7IST83108wirteRegEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IST8310::wirteReg(unsigned char, unsigned char*, unsigned short) &rArr; iic_writeData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Write &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writeData(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
</UL>

<P><STRONG><a name="[285]"></a>IST8310::IST8310()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ist8310.o(i._ZN7IST8310C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
</UL>

<P><STRONG><a name="[2ec]"></a>IST8310::IST8310__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ist8310.o(i._ZN7IST8310C1Ev), UNUSED)

<P><STRONG><a name="[9a]"></a>IST8310::~IST8310()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ist8310.o(i._ZN7IST8310D1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___6_main_c_29f4d46e)
</UL>
<P><STRONG><a name="[2ed]"></a>IST8310::~IST8310__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ist8310.o(i._ZN7IST8310D1Ev), UNUSED)

<P><STRONG><a name="[279]"></a>LKMotor::LKMotor__sub_object()</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, lk8016.o(i._ZN7LKMotorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LKMotor::LKMotor__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::LK9025()
</UL>

<P><STRONG><a name="[22b]"></a>Odometer::init()</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, balancestandcontrol.o(i._ZN8Odometer4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
</UL>

<P><STRONG><a name="[22e]"></a>Odometer::update()</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, balancestandcontrol.o(i._ZN8Odometer6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Odometer::update() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
</UL>

<P><STRONG><a name="[218]"></a>Odometer::Odometer(LKMotor&, LKMotor&)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i._ZN8OdometerC1ER7LKMotorS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Odometer::Odometer(LKMotor&, LKMotor&)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
</UL>

<P><STRONG><a name="[2ee]"></a>Odometer::Odometer__sub_object(LKMotor&, LKMotor&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN8OdometerC1ER7LKMotorS1_), UNUSED)

<P><STRONG><a name="[280]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[204]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_29f4d46e
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[249]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[1fa]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1f9]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[262]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::update()
</UL>

<P><STRONG><a name="[269]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LoopFloatConstrain(float, float, float)
</UL>

<P><STRONG><a name="[263]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Odometer::update()
</UL>

<P><STRONG><a name="[27e]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[282]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[27f]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[281]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[283]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[c7]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData(__SPI_HandleTypeDef*, unsigned char*, unsigned char, SPI_WORK_MODE) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSystickIT()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART3_UART_Init()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM10_Init()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM8_Init()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM5_Init()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM4_Init()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM2_Init()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI1_Init()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_I2C3_Init()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CAN2_Init()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CAN1_Init()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_DMA_Init()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_CRC_Init()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::init()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::init()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ALL_ON()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[27d]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
</UL>

<P><STRONG><a name="[287]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ef]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[28a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[28f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
</UL>

<P><STRONG><a name="[28d]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
</UL>

<P><STRONG><a name="[28e]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[291]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[289]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[28c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[230]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
</UL>

<P><STRONG><a name="[290]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>

<P><STRONG><a name="[292]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[294]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[20a]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
</UL>

<P><STRONG><a name="[295]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[296]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[bc]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2f1]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2f2]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[284]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, frem_clz.o(x$fpl$frem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[288]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[232]"></a>[local to main_c]::MX_CRC_Init()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e11MX_CRC_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to main_c]::MX_CRC_Init() &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>[local to main_c]::MX_DMA_Init()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e11MX_DMA_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to main_c]::MX_DMA_Init() &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>[local to main_c]::MX_CAN1_Init()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_CAN1_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_c]::MX_CAN1_Init() &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>[local to main_c]::MX_CAN2_Init()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_CAN2_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_c]::MX_CAN2_Init() &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>[local to main_c]::MX_GPIO_Init()</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_GPIO_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to main_c]::MX_GPIO_Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[237]"></a>[local to main_c]::MX_I2C3_Init()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_I2C3_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to main_c]::MX_I2C3_Init() &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[238]"></a>[local to main_c]::MX_SPI1_Init()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_SPI1_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to main_c]::MX_SPI1_Init() &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[239]"></a>[local to main_c]::MX_TIM1_Init()</STRONG> (Thumb, 258 bytes, Stack size 88 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_TIM1_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to main_c]::MX_TIM1_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23c]"></a>[local to main_c]::MX_TIM2_Init()</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_TIM2_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_c]::MX_TIM2_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23d]"></a>[local to main_c]::MX_TIM4_Init()</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_TIM4_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to main_c]::MX_TIM4_Init() &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23e]"></a>[local to main_c]::MX_TIM5_Init()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_TIM5_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_c]::MX_TIM5_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>[local to main_c]::MX_TIM8_Init()</STRONG> (Thumb, 258 bytes, Stack size 88 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e12MX_TIM8_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to main_c]::MX_TIM8_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[240]"></a>[local to main_c]::MX_TIM10_Init()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e13MX_TIM10_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_c]::MX_TIM10_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[241]"></a>[local to main_c]::MX_USART3_UART_Init()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i._ZN27_INTERNAL_6_main_c_29f4d46e19MX_USART3_UART_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_c]::MX_USART3_UART_Init() &rArr; HAL_UART_Init &rArr; [local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>__sti___6_main_c_29f4d46e</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_29f4d46e))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sti___6_main_c_29f4d46e &rArr; ChassisController::ChassisController() &rArr; ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::IST8310()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::LKMotorHandler()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::GMMotorHandler()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[140]"></a>[local to stm32f4xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_pcd_c_3a5cb0d320PCD_WriteEmptyTxFifoEP17PCD_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = [local to stm32f4xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned) &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_pcd_c_3a5cb0d325PCD_EP_OutSetupPacket_intEP17PCD_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = [local to stm32f4xx_hal_pcd_c]::PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef*, unsigned) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>[local to stm32f4xx_hal_pcd_c]::PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef*, unsigned)</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_pcd_c_3a5cb0d325PCD_EP_OutXfrComplete_intEP17PCD_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = [local to stm32f4xx_hal_pcd_c]::PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef*, unsigned) &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>[local to stm32f4xx_ll_usb_c]::USB_CoreReset(USB_OTG_GlobalTypeDef*)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i._ZN40_INTERNAL_18_stm32f4xx_ll_usb_c_832330cf13USB_CoreResetEP21USB_OTG_GlobalTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_ll_usb_c]::USB_CoreReset(USB_OTG_GlobalTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[109]"></a>[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[106]"></a>[local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec18DMA_CheckFifoParamEP19__DMA_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[107]"></a>[local to stm32f4xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec23DMA_CalcBaseAndBitshiftEP19__DMA_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[11c]"></a>[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc018__NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[11b]"></a>[local to stm32f4xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc026__NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[110]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f421I2C_RequestMemoryReadEP17I2C_HandleTypeDeftttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[113]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f422I2C_RequestMemoryWriteEP17I2C_HandleTypeDeftttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[24d]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f423I2C_IsAcknowledgeFailedEP17I2C_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[10f]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f426I2C_WaitOnFlagUntilTimeoutEP17I2C_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[115]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f429I2C_WaitOnBTFFlagUntilTimeoutEP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[114]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f429I2C_WaitOnTXEFlagUntilTimeoutEP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[111]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f430I2C_WaitOnRXNEFlagUntilTimeoutEP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[24c]"></a>[local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_i2c_c_0eb271f439I2C_WaitOnMasterAddressFlagUntilTimeoutEP17I2C_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_i2c_c]::I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_i2c_c]::I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[81]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[83]"></a>[local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_RxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[8d]"></a>[local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_TxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[24f]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_CloseRx_ISREP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[250]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_CloseTx_ISREP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[82]"></a>[local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_RxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[8c]"></a>[local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_TxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[253]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd17SPI_CloseRxTx_ISREP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[80]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[8b]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMATransmitCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[88]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesRxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[89]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesTxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[169]"></a>[local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_EndRxTransactionEP19__SPI_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[86]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesRxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[87]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesTxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[7f]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[16f]"></a>[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_EndRxTxTransactionEP19__SPI_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[8a]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd23SPI_DMAHalfTransmitCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[85]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_DMATransmitReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[255]"></a>[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd29SPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[84]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd30SPI_DMAHalfTransmitReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[183]"></a>[local to stm32f4xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5217TIM_OC1_SetConfigEP11TIM_TypeDefPK18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[185]"></a>[local to stm32f4xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5217TIM_OC3_SetConfigEP11TIM_TypeDefPK18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[186]"></a>[local to stm32f4xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5217TIM_OC4_SetConfigEP11TIM_TypeDefPK18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, const TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[177]"></a>[local to stm32f4xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5218TIM_ITRx_SetConfigEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[176]"></a>[local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5224TIM_TI1_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[178]"></a>[local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5224TIM_TI2_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[198]"></a>[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f14UART_SetConfigEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18f]"></a>[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f15UART_Receive_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f16UART_Transmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndRxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_EndTransmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1fc]"></a>[local to remoteControl_c]::SBUS_TO_RC(const volatile unsigned char*, RC_ctrl_t*)</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, remotecontrol.o(i._ZN37_INTERNAL_15_remoteControl_c_d28b7d1910SBUS_TO_RCEPVKhP9RC_ctrl_t))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_remote_control_data()
</UL>

<P><STRONG><a name="[1f4]"></a>[local to kalman_filter_c]::H_K_R_Adjustment(kf_t*)</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, kalman_filter.o(i._ZN37_INTERNAL_15_kalman_filter_c_c2dd93ab16H_K_R_AdjustmentEP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to kalman_filter_c]::H_K_R_Adjustment(kf_t*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure(kf_t*)
</UL>

<P><STRONG><a name="[91]"></a>[local to QuaternionEKF_c]::IMU_QuaternionEKF_SetH(kf_t*)</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af22IMU_QuaternionEKF_SetHEP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to QuaternionEKF_c]::IMU_QuaternionEKF_SetH(kf_t*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
</UL>
<P><STRONG><a name="[8f]"></a>[local to QuaternionEKF_c]::IMU_QuaternionEKF_Observe(kf_t*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af25IMU_QuaternionEKF_ObserveEP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to QuaternionEKF_c]::IMU_QuaternionEKF_Observe(kf_t*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
</UL>
<P><STRONG><a name="[92]"></a>[local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*)</STRONG> (Thumb, 1284 bytes, Stack size 24 bytes, quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af28IMU_QuaternionEKF_xhatUpdateEP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [local to QuaternionEKF_c]::IMU_QuaternionEKF_xhatUpdate(kf_t*) &rArr; arm_mat_inverse_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
</UL>
<P><STRONG><a name="[90]"></a>[local to QuaternionEKF_c]::IMU_QuaternionEKF_F_Linearization_P_Fading(kf_t*)</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af42IMU_QuaternionEKF_F_Linearization_P_FadingEP4kf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to QuaternionEKF_c]::IMU_QuaternionEKF_F_Linearization_P_Fading(kf_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::invSqrt(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(i._Z22IMU_QuaternionEKF_InitPffffff)
</UL>
<P><STRONG><a name="[1f8]"></a>[local to QuaternionEKF_c]::invSqrt(float)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, quaternionekf.o(i._ZN37_INTERNAL_15_QuaternionEKF_c_6c8bd6af7invSqrtEf))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to QuaternionEKF_c]::IMU_QuaternionEKF_F_Linearization_P_Fading(kf_t*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1dd]"></a>[local to bsp_dwt_c]::DWT_CNT_Update()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_dwt.o(i._ZN30_INTERNAL_9_bsp_dwt_c_0df8e53f14DWT_CNT_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to bsp_dwt_c]::DWT_CNT_Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaT(unsigned*)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init(unsigned)
</UL>

<P><STRONG><a name="[b4]"></a>__sti___18_GimbalStateFPS_cpp_db872dfd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gimbalstatefps.o(i.__sti___18_GimbalStateFPS_cpp_db872dfd))
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.init_array)
</UL>
<P><STRONG><a name="[b5]"></a>__sti___24_BalanceRemoteControl_cpp_124ac066</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, balanceremotecontrol.o(i.__sti___24_BalanceRemoteControl_cpp_124ac066))
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.init_array)
</UL>
<P><STRONG><a name="[244]"></a>[local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_desc.o(i._ZN32_INTERNAL_11_usbd_desc_c_FS_Desc12IntToUnicodeEjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_desc_c]::Get_SerialNum()
</UL>

<P><STRONG><a name="[1fb]"></a>[local to usbd_desc_c]::Get_SerialNum()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_desc.o(i._ZN32_INTERNAL_11_usbd_desc_c_FS_Desc13Get_SerialNumEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to usbd_desc_c]::Get_SerialNum() &rArr; [local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
</UL>

<P><STRONG><a name="[13]"></a>[local to usbd_cdc_if_c]::CDC_Init_FS()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01611CDC_Init_FSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to usbd_cdc_if_c]::CDC_Init_FS()
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>[local to usbd_cdc_if_c]::CDC_DeInit_FS()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01613CDC_DeInit_FSEv))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>[local to usbd_cdc_if_c]::CDC_Control_FS(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01614CDC_Control_FSEhPht))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>[local to usbd_cdc_if_c]::CDC_Receive_FS(unsigned char*, unsigned*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01614CDC_Receive_FSEPhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = [local to usbd_cdc_if_c]::CDC_Receive_FS(unsigned char*, unsigned*) &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>[local to usbd_cdc_if_c]::CDC_TransmitCplt_FS(unsigned char*, unsigned*, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i._ZN35_INTERNAL_13_usbd_cdc_if_c_52eaf01619CDC_TransmitCplt_FSEPhPjh))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[1b3]"></a>[local to usbd_ctlreq_c]::USBD_GetLen(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f111USBD_GetLenEPh))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[1c9]"></a>[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f114USBD_GetConfigEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ca]"></a>[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f114USBD_GetStatusEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c8]"></a>[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f114USBD_SetConfigEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cc]"></a>[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f115USBD_ClrFeatureEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c7]"></a>[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f115USBD_SetAddressEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cb]"></a>[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f115USBD_SetFeatureEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c6]"></a>[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f118USBD_GetDescriptorEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[18]"></a>[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC13USBD_CDC_InitEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC14USBD_CDC_SetupEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>[local to usbd_cdc_c]::USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DataInEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DeInitEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>[local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC16USBD_CDC_DataOutEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>[local to usbd_cdc_c]::USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC20USBD_CDC_EP0_RxReadyEP19_USBD_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>[local to usbd_cdc_c]::USBD_CDC_GetFSCfgDesc(unsigned short*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetFSCfgDescEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_GetFSCfgDesc(unsigned short*) &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>[local to usbd_cdc_c]::USBD_CDC_GetHSCfgDesc(unsigned short*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetHSCfgDescEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_GetHSCfgDesc(unsigned short*) &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>[local to usbd_cdc_c]::USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC29USBD_CDC_GetOtherSpeedCfgDescEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*) &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[293]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[28b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
