<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Gimbal\Gimbal.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Gimbal\Gimbal.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sat Oct 19 21:53:54 2024
<BR><P>
<H3>Maximum Stack Usage =        436 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BalanceRemoteControl::enter() &rArr; cVelFusionKF::UpdateKalman(float, float) &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[10c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">CAN2_TX_IRQHandler</a> from stm32f4xx_it.o(.text.CAN2_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">CDC_Control_FS</a> from usbd_cdc_if.o(.text.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[12]">CDC_DeInit_FS</a> from usbd_cdc_if.o(.text.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[11]">CDC_Init_FS</a> from usbd_cdc_if.o(.text.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[14]">CDC_Receive_FS</a> from usbd_cdc_if.o(.text.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[15]">CDC_TransmitCplt_FS</a> from usbd_cdc_if.o(.text.CDC_TransmitCplt_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[6e]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[84]">IMU_QuaternionEKF_F_Linearization_P_Fading</a> from quaternionekf.o(.text.IMU_QuaternionEKF_F_Linearization_P_Fading) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[83]">IMU_QuaternionEKF_Observe</a> from quaternionekf.o(.text.IMU_QuaternionEKF_Observe) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[85]">IMU_QuaternionEKF_SetH</a> from quaternionekf.o(.text.IMU_QuaternionEKF_SetH) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[86]">IMU_QuaternionEKF_xhatUpdate</a> from quaternionekf.o(.text.IMU_QuaternionEKF_xhatUpdate) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">SPI_2linesRxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_2linesRxISR_16BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[7c]">SPI_2linesRxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_2linesRxISR_8BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[7b]">SPI_2linesTxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_2linesTxISR_16BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[7d]">SPI_2linesTxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_2linesTxISR_8BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[75]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAError) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA)
 <LI><a href="#[75]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAError) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[75]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAError) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[73]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAHalfReceiveCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA)
 <LI><a href="#[73]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAHalfReceiveCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[7e]">SPI_DMAHalfTransmitCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAHalfTransmitCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[78]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAHalfTransmitReceiveCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[74]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAReceiveCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA)
 <LI><a href="#[74]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMAReceiveCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[7f]">SPI_DMATransmitCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMATransmitCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[79]">SPI_DMATransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(.text.SPI_DMATransmitReceiveCplt) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[76]">SPI_RxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_RxISR_16BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_IT)
 <LI><a href="#[77]">SPI_RxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_RxISR_8BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_IT)
 <LI><a href="#[80]">SPI_TxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_TxISR_16BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_IT)
 <LI><a href="#[81]">SPI_TxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text.SPI_TxISR_8BIT) referenced 2 times from stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_IT)
 <LI><a href="#[1c]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from cpp_main.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from bsp_tim.o(.text.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[82]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from bsp_usart.o(.text.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">USBD_CDC_DataIn</a> from usbd_cdc.o(.text.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[c]">USBD_CDC_DataOut</a> from usbd_cdc.o(.text.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[8]">USBD_CDC_DeInit</a> from usbd_cdc.o(.text.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[a]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(.text.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[10]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(.text.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[e]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[d]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[f]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[7]">USBD_CDC_Init</a> from usbd_cdc.o(.text.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[9]">USBD_CDC_Setup</a> from usbd_cdc.o(.text.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[5]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(.text.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[0]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(.text.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[6]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(.text.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[1]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(.text.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[2]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(.text.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[3]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(.text.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[4]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(.text.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data.FS_Desc)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[dd]">_GLOBAL__sub_I_GimbalStateFPS.cpp</a> from gimbalstatefps.o(.text._GLOBAL__sub_I_GimbalStateFPS.cpp) referenced from gimbalstatefps.o(.init_array)
 <LI><a href="#[de]">_GLOBAL__sub_I_cpp_main.cpp</a> from cpp_main.o(.text._GLOBAL__sub_I_cpp_main.cpp) referenced from cpp_main.o(.init_array)
 <LI><a href="#[97]">StateMachine::run()</a> from gimbalstatefps.o(.text._ZN12StateMachine3runEv) referenced from gimbalstatefps.o(.rodata._ZTV12StateMachine)
 <LI><a href="#[96]">StateMachine::exit()</a> from gimbalstatefps.o(.text._ZN12StateMachine4exitEv) referenced from gimbalstatefps.o(.rodata._ZTV12StateMachine)
 <LI><a href="#[93]">StateMachine::init()</a> from gimbalstatefps.o(.text._ZN12StateMachine4initEv) referenced from gimbalstatefps.o(.rodata._ZTV12StateMachine)
 <LI><a href="#[94]">StateMachine::enter()</a> from gimbalstatefps.o(.text._ZN12StateMachine5enterEv) referenced from gimbalstatefps.o(.rodata._ZTV12StateMachine)
 <LI><a href="#[95]">StateMachine::execute()</a> from gimbalstatefps.o(.text._ZN12StateMachine7executeEv) referenced from gimbalstatefps.o(.rodata._ZTV12StateMachine)
 <LI><a href="#[87]">GMMotorHandler::~GMMotorHandler()</a> from gmmotorhandler.o(.text._ZN14GMMotorHandlerD2Ev) referenced 2 times from cpp_solution.o(.text._ZN14GMMotorHandler8instanceEv)
 <LI><a href="#[9c]">GimbalStateFPS::run()</a> from gimbalstatefps.o(.text._ZN14GimbalStateFPS3runEv) referenced from gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
 <LI><a href="#[9b]">GimbalStateFPS::exit()</a> from gimbalstatefps.o(.text._ZN14GimbalStateFPS4exitEv) referenced from gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
 <LI><a href="#[98]">GimbalStateFPS::init()</a> from gimbalstatefps.o(.text._ZN14GimbalStateFPS4initEv) referenced from gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
 <LI><a href="#[99]">GimbalStateFPS::enter()</a> from gimbalstatefps.o(.text._ZN14GimbalStateFPS5enterEv) referenced from gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
 <LI><a href="#[9a]">GimbalStateFPS::execute()</a> from gimbalstatefps.o(.text._ZN14GimbalStateFPS7executeEv) referenced from gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
 <LI><a href="#[88]">LKMotorHandler::~LKMotorHandler()</a> from lkmotorhandler.o(.text._ZN14LKMotorHandlerD2Ev) referenced 2 times from cpp_solution.o(.text._ZN14LKMotorHandler8instanceEv)
 <LI><a href="#[a1]">ChassisStateFPS::run()</a> from chassisstatefps.o(.text._ZN15ChassisStateFPS3runEv) referenced from chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
 <LI><a href="#[a0]">ChassisStateFPS::exit()</a> from chassisstatefps.o(.text._ZN15ChassisStateFPS4exitEv) referenced from chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
 <LI><a href="#[9d]">ChassisStateFPS::init()</a> from chassisstatefps.o(.text._ZN15ChassisStateFPS4initEv) referenced from chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
 <LI><a href="#[9e]">ChassisStateFPS::enter()</a> from chassisstatefps.o(.text._ZN15ChassisStateFPS5enterEv) referenced from chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
 <LI><a href="#[9f]">ChassisStateFPS::execute()</a> from chassisstatefps.o(.text._ZN15ChassisStateFPS7executeEv) referenced from chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
 <LI><a href="#[a2]">GimbalController::run()</a> from gimbalcontroller.o(.text._ZN16GimbalController3runEv) referenced from gimbalcontroller.o(.rodata._ZTV16GimbalController)
 <LI><a href="#[89]">GimbalController::~GimbalController__sub_object()</a> from chassisstatefps.o(.text._ZN16GimbalControllerD2Ev) referenced 2 times from chassisstatefps.o(.text._ZN16GimbalController8instanceEv)
 <LI><a href="#[a7]">GimbalStateRelax::run()</a> from gimbalstaterelax.o(.text._ZN16GimbalStateRelax3runEv) referenced from gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
 <LI><a href="#[a6]">GimbalStateRelax::exit()</a> from gimbalstaterelax.o(.text._ZN16GimbalStateRelax4exitEv) referenced from gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
 <LI><a href="#[a3]">GimbalStateRelax::init()</a> from gimbalstaterelax.o(.text._ZN16GimbalStateRelax4initEv) referenced from gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
 <LI><a href="#[a4]">GimbalStateRelax::enter()</a> from gimbalstaterelax.o(.text._ZN16GimbalStateRelax5enterEv) referenced from gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
 <LI><a href="#[a5]">GimbalStateRelax::execute()</a> from gimbalstaterelax.o(.text._ZN16GimbalStateRelax7executeEv) referenced from gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
 <LI><a href="#[a8]">BalanceController::run()</a> from balancecontroller.o(.text._ZN17BalanceController3runEv) referenced from balancecontroller.o(.rodata._ZTV17BalanceController)
 <LI><a href="#[8a]">BalanceController::~BalanceController__sub_object()</a> from cpp_main.o(.text._ZN17BalanceControllerD2Ev) referenced 2 times from cpp_main.o(.text._ZN17BalanceController8instanceEv)
 <LI><a href="#[ad]">BalanceStateRelax::run()</a> from balancestaterelax.o(.text._ZN17BalanceStateRelax3runEv) referenced from balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
 <LI><a href="#[ac]">BalanceStateRelax::exit()</a> from balancestaterelax.o(.text._ZN17BalanceStateRelax4exitEv) referenced from balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
 <LI><a href="#[a9]">BalanceStateRelax::init()</a> from balancestaterelax.o(.text._ZN17BalanceStateRelax4initEv) referenced from balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
 <LI><a href="#[aa]">BalanceStateRelax::enter()</a> from balancestaterelax.o(.text._ZN17BalanceStateRelax5enterEv) referenced from balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
 <LI><a href="#[ab]">BalanceStateRelax::execute()</a> from balancestaterelax.o(.text._ZN17BalanceStateRelax7executeEv) referenced from balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
 <LI><a href="#[8b]">BoardConnectivity::~BoardConnectivity()</a> from boardconnectivity.o(.text._ZN17BoardConnectivityD2Ev) referenced 2 times from chassisstaterelax.o(.text._ZN17BoardConnectivity8instanceEv)
 <LI><a href="#[ae]">ChassisController::run()</a> from chassiscontroller.o(.text._ZN17ChassisController3runEv) referenced from chassiscontroller.o(.rodata._ZTV17ChassisController)
 <LI><a href="#[8c]">ChassisController::~ChassisController__sub_object()</a> from gimbalstatefps.o(.text._ZN17ChassisControllerD2Ev) referenced 2 times from gimbalstatefps.o(.text._ZN17ChassisController8instanceEv)
 <LI><a href="#[b3]">ChassisStateRelax::run()</a> from chassisstaterelax.o(.text._ZN17ChassisStateRelax3runEv) referenced from chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
 <LI><a href="#[b2]">ChassisStateRelax::exit()</a> from chassisstaterelax.o(.text._ZN17ChassisStateRelax4exitEv) referenced from chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
 <LI><a href="#[af]">ChassisStateRelax::init()</a> from chassisstaterelax.o(.text._ZN17ChassisStateRelax4initEv) referenced from chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
 <LI><a href="#[b0]">ChassisStateRelax::enter()</a> from chassisstaterelax.o(.text._ZN17ChassisStateRelax5enterEv) referenced from chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
 <LI><a href="#[b1]">ChassisStateRelax::execute()</a> from chassisstaterelax.o(.text._ZN17ChassisStateRelax7executeEv) referenced from chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
 <LI><a href="#[b8]">GimbalStateSearch::run()</a> from gimbalstatesearch.o(.text._ZN17GimbalStateSearch3runEv) referenced from gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
 <LI><a href="#[b7]">GimbalStateSearch::exit()</a> from gimbalstatesearch.o(.text._ZN17GimbalStateSearch4exitEv) referenced from gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
 <LI><a href="#[b4]">GimbalStateSearch::init()</a> from gimbalstatesearch.o(.text._ZN17GimbalStateSearch4initEv) referenced from gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
 <LI><a href="#[b5]">GimbalStateSearch::enter()</a> from gimbalstatesearch.o(.text._ZN17GimbalStateSearch5enterEv) referenced from gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
 <LI><a href="#[b6]">GimbalStateSearch::execute()</a> from gimbalstatesearch.o(.text._ZN17GimbalStateSearch7executeEv) referenced from gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
 <LI><a href="#[b9]">ShooterController::run()</a> from shootercontroller.o(.text._ZN17ShooterController3runEv) referenced from shootercontroller.o(.rodata._ZTV17ShooterController)
 <LI><a href="#[8d]">ShooterController::~ShooterController__sub_object()</a> from cpp_main.o(.text._ZN17ShooterControllerD2Ev) referenced 2 times from cpp_main.o(.text._ZN17ShooterController8instanceEv)
 <LI><a href="#[be]">ChassisStateRotate::run()</a> from chassisstaterotate.o(.text._ZN18ChassisStateRotate3runEv) referenced from chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
 <LI><a href="#[bd]">ChassisStateRotate::exit()</a> from chassisstaterotate.o(.text._ZN18ChassisStateRotate4exitEv) referenced from chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
 <LI><a href="#[ba]">ChassisStateRotate::init()</a> from chassisstaterotate.o(.text._ZN18ChassisStateRotate4initEv) referenced from chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
 <LI><a href="#[bb]">ChassisStateRotate::enter()</a> from chassisstaterotate.o(.text._ZN18ChassisStateRotate5enterEv) referenced from chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
 <LI><a href="#[bc]">ChassisStateRotate::execute()</a> from chassisstaterotate.o(.text._ZN18ChassisStateRotate7executeEv) referenced from chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
 <LI><a href="#[c3]">BalanceSpeedControl::run()</a> from balancespeedcontrol.o(.text._ZN19BalanceSpeedControl3runEv) referenced from balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
 <LI><a href="#[c2]">BalanceSpeedControl::exit()</a> from balancespeedcontrol.o(.text._ZN19BalanceSpeedControl4exitEv) referenced from balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
 <LI><a href="#[bf]">BalanceSpeedControl::init()</a> from balancespeedcontrol.o(.text._ZN19BalanceSpeedControl4initEv) referenced from balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
 <LI><a href="#[c0]">BalanceSpeedControl::enter()</a> from balancespeedcontrol.o(.text._ZN19BalanceSpeedControl5enterEv) referenced from balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
 <LI><a href="#[c1]">BalanceSpeedControl::execute()</a> from balancespeedcontrol.o(.text._ZN19BalanceSpeedControl7executeEv) referenced from balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
 <LI><a href="#[c8]">BalanceStandControl::run()</a> from balancestandcontrol.o(.text._ZN19BalanceStandControl3runEv) referenced from balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
 <LI><a href="#[c7]">BalanceStandControl::exit()</a> from balancestandcontrol.o(.text._ZN19BalanceStandControl4exitEv) referenced from balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
 <LI><a href="#[c4]">BalanceStandControl::init()</a> from balancestandcontrol.o(.text._ZN19BalanceStandControl4initEv) referenced from balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
 <LI><a href="#[c5]">BalanceStandControl::enter()</a> from balancestandcontrol.o(.text._ZN19BalanceStandControl5enterEv) referenced from balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
 <LI><a href="#[c6]">BalanceStandControl::execute()</a> from balancestandcontrol.o(.text._ZN19BalanceStandControl7executeEv) referenced from balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
 <LI><a href="#[cd]">BalanceRemoteControl::run()</a> from balanceremotecontrol.o(.text._ZN20BalanceRemoteControl3runEv) referenced from balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
 <LI><a href="#[cc]">BalanceRemoteControl::exit()</a> from balanceremotecontrol.o(.text._ZN20BalanceRemoteControl4exitEv) referenced from balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
 <LI><a href="#[c9]">BalanceRemoteControl::init()</a> from balanceremotecontrol.o(.text._ZN20BalanceRemoteControl4initEv) referenced from balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
 <LI><a href="#[ca]">BalanceRemoteControl::enter()</a> from balanceremotecontrol.o(.text._ZN20BalanceRemoteControl5enterEv) referenced from balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
 <LI><a href="#[cb]">BalanceRemoteControl::execute()</a> from balanceremotecontrol.o(.text._ZN20BalanceRemoteControl7executeEv) referenced from balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
 <LI><a href="#[d2]">GimbalStateRemoteControl::run()</a> from gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl3runEv) referenced from gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
 <LI><a href="#[d1]">GimbalStateRemoteControl::exit()</a> from gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl4exitEv) referenced from gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
 <LI><a href="#[ce]">GimbalStateRemoteControl::init()</a> from gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl4initEv) referenced from gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
 <LI><a href="#[cf]">GimbalStateRemoteControl::enter()</a> from gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl5enterEv) referenced from gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
 <LI><a href="#[d0]">GimbalStateRemoteControl::execute()</a> from gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl7executeEv) referenced from gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
 <LI><a href="#[d7]">ChassisStateRemoteControl::run()</a> from chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl3runEv) referenced from chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
 <LI><a href="#[d6]">ChassisStateRemoteControl::exit()</a> from chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl4exitEv) referenced from chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
 <LI><a href="#[d3]">ChassisStateRemoteControl::init()</a> from chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl4initEv) referenced from chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
 <LI><a href="#[d4]">ChassisStateRemoteControl::enter()</a> from chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl5enterEv) referenced from chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
 <LI><a href="#[d5]">ChassisStateRemoteControl::execute()</a> from chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl7executeEv) referenced from chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
 <LI><a href="#[8e]">AHRS::~AHRS__sub_object()</a> from cpp_solution.o(.text._ZN4AHRSD2Ev) referenced 2 times from cpp_solution.o(.text._ZN4AHRS8instanceEv)
 <LI><a href="#[8f]">Dr16::~Dr16()</a> from dr16.o(.text._ZN4Dr16D2Ev) referenced 2 times from gimbalcontroller.o(.text._ZN4Dr168instanceEv)
 <LI><a href="#[90]">BMI088::~BMI088()</a> from bmi088.o(.text._ZN6BMI088D2Ev) referenced 2 times from ahrs.o(.text._ZN6BMI0888instanceEv)
 <LI><a href="#[d8]">GM2006::setOutput()</a> from gm2006.o(.text._ZN6GM20069setOutputEv) referenced from gm2006.o(.rodata._ZTV6GM2006)
 <LI><a href="#[d9]">GM3508::setOutput()</a> from gm3508.o(.text._ZN6GM35089setOutputEv) referenced from gm3508.o(.rodata._ZTV6GM3508)
 <LI><a href="#[da]">GM6020::setOutput()</a> from gm6020.o(.text._ZN6GM60209setOutputEv) referenced from gm6020.o(.rodata._ZTV6GM6020)
 <LI><a href="#[db]">LK8016::setOutput()</a> from lk8016.o(.text._ZN6LK80169setOutputEv) referenced from lk8016.o(.rodata._ZTV6LK8016)
 <LI><a href="#[dc]">LK9025::setOutput()</a> from lk9025.o(.text._ZN6LK90259setOutputEv) referenced from lk9025.o(.rodata._ZTV6LK9025)
 <LI><a href="#[91]">IST8310::~IST8310()</a> from ist8310.o(.text._ZN7IST8310D2Ev) referenced 2 times from cpp_solution.o(.text._ZN7IST83108instanceEv)
 <LI><a href="#[92]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from gimbalstatefps.o(.rodata._ZTV10Controller)
 <LI><a href="#[92]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from gm2006.o(.rodata._ZTV7GMMotor)
 <LI><a href="#[92]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from lk8016.o(.rodata._ZTV7LKMotor)
 <LI><a href="#[72]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e2]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ff]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[300]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[301]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[302]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[303]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[304]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[e5]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[305]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[306]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[307]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[308]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[309]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[30a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[30b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[30c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[30d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[30e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[30f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[310]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[311]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[312]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[313]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[314]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[315]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[316]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[317]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[318]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[319]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e8]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[31a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[31b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[31c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[31d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[31e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[31f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[320]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e1]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[321]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ea]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ec]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[322]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ee]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; main_demo &rArr; BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[323]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[10d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[324]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f5]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[f8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::~BoardConnectivity()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[325]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::instance()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::instance()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::instance()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::instance()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
</UL>

<P><STRONG><a name="[fb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[326]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::LQR__sub_object()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Observe
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H_K_R_Adjustment
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[327]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
</UL>

<P><STRONG><a name="[32a]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_SetH
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H_K_R_Adjustment
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[32d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[f6]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[330]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[100]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e6]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[102]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[334]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[105]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[335]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[336]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[337]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[339]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[e9]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[101]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[f4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[33a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10a]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[108]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[109]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[10f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[10e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[110]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CAN2_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b2]"></a>Cross3d</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, user_lib.o(.text.Cross3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cross3d
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[2c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b0]"></a>DWT_Delay</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, bsp_dwt.o(.text.DWT_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DWT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_CONF_INIT()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[116]"></a>DWT_GetDeltaT</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bsp_dwt.o(.text.DWT_GetDeltaT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DWT_GetDeltaT &rArr; DWT_CNT_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_CNT_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
</UL>

<P><STRONG><a name="[118]"></a>DWT_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bsp_dwt.o(.text.DWT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DWT_Init &rArr; DWT_CNT_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_CNT_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b1]"></a>Dot3d</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, user_lib.o(.text.Dot3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dot3d
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[119]"></a>EnableSystickIT</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(.text.EnableSystickIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableSystickIT &rArr; HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sendData
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>

<P><STRONG><a name="[127]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[2df]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_callback_cpp
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetTxMailboxesFreeLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sendData
</UL>

<P><STRONG><a name="[111]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 1010 bytes, Stack size 48 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_CAN_Init</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo0FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bsp_can.o(.text.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_callback_cpp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_SleepCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_SleepCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_CAN_Start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_WakeUpFromRxMsgCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_CRC_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_DMA_Abort</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 798 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_DMA_Init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[136]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[138]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[12b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 950 bytes, Stack size 56 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ALL_ON
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>

<P><STRONG><a name="[139]"></a>HAL_I2C_Init</STRONG> (Thumb, 676 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 1096 bytes, Stack size 56 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readData
</UL>

<P><STRONG><a name="[140]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writeData
</UL>

<P><STRONG><a name="[13a]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, stm32f4xx_hal_msp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[20a]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[144]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>HAL_InitTick</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[12c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[145]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd_ex.o(.text.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd_ex.o(.text.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[228]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd_ex.o(.text.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[154]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[15a]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[226]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[15c]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[15e]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[160]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[163]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[164]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 2104 bytes, Stack size 56 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>HAL_PCD_Init</STRONG> (Thumb, 578 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[17e]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, usbd_conf.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[18b]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(.text.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[18d]"></a>HAL_PCD_Start</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[174]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[177]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[193]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[192]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[195]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1726 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[202]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_SPI_GetState</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData
</UL>

<P><STRONG><a name="[196]"></a>HAL_SPI_Init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, stm32f4xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_SPI_Receive</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData
</UL>

<P><STRONG><a name="[19b]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData
</UL>

<P><STRONG><a name="[200]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>

<P><STRONG><a name="[206]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[19f]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 662 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData
</UL>

<P><STRONG><a name="[199]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 904 bytes, Stack size 64 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[19c]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[19e]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 348 bytes, Stack size 28 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData
</UL>

<P><STRONG><a name="[205]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[207]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[201]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[208]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[11a]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSystickIT
</UL>

<P><STRONG><a name="[148]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIMEx_CommutCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
</UL>

<P><STRONG><a name="[1af]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1068 bytes, Stack size 80 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_UART_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_UART_MspInit</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[211]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[210]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>IMU_QuaternionEKF_Init</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Init &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
</UL>

<P><STRONG><a name="[1d3]"></a>IMU_QuaternionEKF_Update</STRONG> (Thumb, 1496 bytes, Stack size 80 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[1d1]"></a>Kalman_Filter_Init</STRONG> (Thumb, 1688 bytes, Stack size 48 bytes, kalman_filter.o(.text.Kalman_Filter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::cVelFusionKF__sub_object()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
</UL>

<P><STRONG><a name="[1de]"></a>Kalman_Filter_Measure</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Measure &rArr; H_K_R_Adjustment &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H_K_R_Adjustment
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1df]"></a>Kalman_Filter_P_Update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_P_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kalman_Filter_P_Update &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1e0]"></a>Kalman_Filter_PminusUpdate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_PminusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kalman_Filter_PminusUpdate &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1e1]"></a>Kalman_Filter_SetK</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_SetK))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1d4]"></a>Kalman_Filter_Update</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, kalman_filter.o(.text.Kalman_Filter_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::UpdateKalman(float, float)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[1e2]"></a>Kalman_Filter_xhatMinusUpdate</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_xhatMinusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kalman_Filter_xhatMinusUpdate &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1e3]"></a>Kalman_Filter_xhatUpdate</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_xhatUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kalman_Filter_xhatUpdate &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1e4]"></a>LED_ALL_ON</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, led.o(.text.LED_ALL_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_ALL_ON &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usb_device.o(.text.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>Norm3d</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, user_lib.o(.text.Norm3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Norm3d &rArr; Sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[63]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2cb]"></a>PWM_SetDutyRatio</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, bsp_pwm.o(.text.PWM_SetDutyRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PWM_SetDutyRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::TemperatureControl(float)
</UL>

<P><STRONG><a name="[1fe]"></a>PWM_Start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_pwm.o(.text.PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PWM_Start &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1fc]"></a>Sqrt</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, user_lib.o(.text.Sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norm3d
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpp_main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SysTick_Handler &rArr; BMI088::update() &rArr; BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateData()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>SystemClock_Config</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_tim.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; ahrs_update &rArr; AHRS::AHRS_Update() &rArr; IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 432 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1bf]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[1a7]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1b6]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_usart.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_remote_control_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[114]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_cdc.o(.text.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[1f9]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[113]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[112]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[230]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[231]"></a>USBD_CoreFindEP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_CoreFindEP))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[233]"></a>USBD_CoreFindIF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_CoreFindIF))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
</UL>

<P><STRONG><a name="[21e]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[21f]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[21d]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[21b]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[221]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[21c]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[222]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[5]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_desc.o(.text.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_desc.o(.text.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[3]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usbd_desc.o(.text.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_SerialStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[217]"></a>USBD_GetEpDesc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_GetEpDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetEpDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetOtherSpeedCfgDesc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetFSCfgDesc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetHSCfgDesc
</UL>

<P><STRONG><a name="[223]"></a>USBD_GetString</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
</UL>

<P><STRONG><a name="[1f7]"></a>USBD_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[225]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[215]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[151]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[153]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[14f]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[214]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_GetRxDataSize &rArr; HAL_PCD_EP_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[224]"></a>USBD_LL_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[232]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[17b]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[17c]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[219]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[21a]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>

<P><STRONG><a name="[186]"></a>USBD_LL_Reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[187]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[188]"></a>USBD_LL_SOF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[185]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[229]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[18c]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[220]"></a>USBD_LL_StallEP</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[22e]"></a>USBD_LL_Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[190]"></a>USBD_LL_Suspend</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[213]"></a>USBD_LL_Transmit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>

<P><STRONG><a name="[22a]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_ctlreq.o(.text.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1f8]"></a>USBD_RegisterClass</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[22f]"></a>USBD_SetClassConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_SetClassConfig))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1fa]"></a>USBD_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[22b]"></a>USBD_StdDevReq</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, usbd_ctlreq.o(.text.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[22d]"></a>USBD_StdEPReq</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[22c]"></a>USBD_StdItfReq</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[216]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[218]"></a>USBD_static_malloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[15d]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[175]"></a>USB_ActivateSetup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_ActivateSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>USB_CoreInit</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, stm32f4xx_ll_usb.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[159]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[18f]"></a>USB_DevConnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[183]"></a>USB_DevDisconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[182]"></a>USB_DevInit</STRONG> (Thumb, 666 bytes, Stack size 56 bytes, stm32f4xx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[17f]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f4xx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[162]"></a>USB_EP0_OutStart</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(.text.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>USB_EPClearStall</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[161]"></a>USB_EPSetStall</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[15f]"></a>USB_EPStartXfer</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32f4xx_ll_usb.o(.text.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[157]"></a>USB_EPStopXfer</STRONG> (Thumb, 284 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(.text.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[18e]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f4xx_ll_usb.o(.text.USB_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[236]"></a>USB_FlushRxFifo</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[16f]"></a>USB_FlushTxFifo</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>USB_GetDevSpeed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>USB_GetMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f4xx_ll_usb.o(.text.USB_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(.text.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllInEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(.text.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllOutEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(.text.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>USB_ReadInterrupts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_ReadInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>USB_ReadPacket</STRONG> (Thumb, 180 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(.text.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>USB_SetCurrentMode</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[18a]"></a>USB_SetDevAddress</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(.text.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[235]"></a>USB_SetDevSpeed</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(.text.USB_SetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[178]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>USB_WritePacket</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stm32f4xx_ll_usb.o(.text.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[277]"></a>Controller::Controller__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN10ControllerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Controller::Controller__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::ShooterController__sub_object()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
</UL>

<P><STRONG><a name="[280]"></a>Controller::~Controller__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN10ControllerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Controller::~Controller__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::~ShooterController__sub_object()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController__sub_object()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::~ChassisController__sub_object()
</UL>

<P><STRONG><a name="[243]"></a>cLinkSolver::Resolve(float, float)</STRONG> (Thumb, 1264 bytes, Stack size 120 bytes, balance_task.o(.text._ZN11cLinkSolver7ResolveEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cLinkSolver::Resolve(float, float) &rArr; arm_atan2_f32 &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2a8]"></a>cLinkSolver::cLinkSolver__sub_object()</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, cpp_main.o(.text._ZN11cLinkSolverC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cLinkSolver::cLinkSolver__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
</UL>

<P><STRONG><a name="[97]"></a>StateMachine::run()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachine3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV12StateMachine)
</UL>
<P><STRONG><a name="[96]"></a>StateMachine::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachine4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV12StateMachine)
</UL>
<P><STRONG><a name="[93]"></a>StateMachine::init()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachine4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV12StateMachine)
</UL>
<P><STRONG><a name="[94]"></a>StateMachine::enter()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachine5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::enter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV12StateMachine)
</UL>
<P><STRONG><a name="[95]"></a>StateMachine::execute()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachine7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV12StateMachine)
</UL>
<P><STRONG><a name="[264]"></a>StateMachine::StateMachine__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachineC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::BalanceSpeedControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::BalanceStateRelax__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::GimbalStateFPS__sub_object(GM6020*, GM6020*)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::GimbalStateRemoteControl__sub_object(GM6020*, GM6020*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::GimbalStateSearch__sub_object(GM6020*, GM6020*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::GimbalStateRelax__sub_object(GM6020*, GM6020*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::ChassisStateFPS__sub_object()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::ChassisStateRotate__sub_object()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::ChassisStateRelax__sub_object()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::ChassisStateRemoteControl__sub_object()
</UL>

<P><STRONG><a name="[266]"></a>StateMachine::~StateMachine__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN12StateMachineD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::~BalanceStateRelax__sub_object()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::~BalanceRemoteControl__sub_object()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::~BalanceSpeedControl__sub_object()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::~BalanceStandControl__sub_object()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::~GimbalStateRelax__sub_object()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::~GimbalStateSearch__sub_object()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::~GimbalStateRemoteControl__sub_object()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::~GimbalStateFPS__sub_object()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::~ChassisStateRemoteControl__sub_object()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::~ChassisStateRelax__sub_object()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::~ChassisStateRotate__sub_object()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::~ChassisStateFPS__sub_object()
</UL>

<P><STRONG><a name="[24c]"></a>TASK_CONTROL::LQR::refreshLQRK(float)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, balanceremotecontrol.o(.text._ZN12TASK_CONTROL3LQR11refreshLQRKEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK_CONTROL::LQR::refreshLQRK(float) &rArr; __hardfp_roundf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[24e]"></a>TASK_CONTROL::LQR::LQRCal(float*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, balanceremotecontrol.o(.text._ZN12TASK_CONTROL3LQR6LQRCalEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TASK_CONTROL::LQR::LQRCal(float*) &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2a7]"></a>TASK_CONTROL::LQR::InitMatX(arm_matrix_instance_f32*, arm_matrix_instance_f32*)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, balanceremotecontrol.o(.text._ZN12TASK_CONTROL3LQR8InitMatXEP23arm_matrix_instance_f32S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TASK_CONTROL::LQR::InitMatX(arm_matrix_instance_f32*, arm_matrix_instance_f32*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
</UL>

<P><STRONG><a name="[24f]"></a>TASK_CONTROL::LQR::LQR__sub_object()</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, cpp_main.o(.text._ZN12TASK_CONTROL3LQRC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK_CONTROL::LQR::LQR__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
</UL>

<P><STRONG><a name="[250]"></a>cVelFusionKF::UpdateKalman(float, float)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, balanceremotecontrol.o(.text._ZN12cVelFusionKF12UpdateKalmanEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = cVelFusionKF::UpdateKalman(float, float) &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2a6]"></a>cVelFusionKF::GetVhat()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, balanceremotecontrol.o(.text._ZN12cVelFusionKF7GetVhatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cVelFusionKF::GetVhat()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2a5]"></a>cVelFusionKF::GetXhat()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, balanceremotecontrol.o(.text._ZN12cVelFusionKF7GetXhatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cVelFusionKF::GetXhat()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[251]"></a>cVelFusionKF::cVelFusionKF__sub_object()</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, cpp_main.o(.text._ZN12cVelFusionKFC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
</UL>

<P><STRONG><a name="[275]"></a>GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandler13registerMotorEP7GMMotorP17CAN_HandleTypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>

<P><STRONG><a name="[252]"></a>GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandler14processRawDataEP17CAN_HandleTypeDefPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; GMMotorHandler::updateFeedback()
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::updateFeedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_callback_cpp
</UL>

<P><STRONG><a name="[253]"></a>GMMotorHandler::updateFeedback()</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandler14updateFeedbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GMMotorHandler::updateFeedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>

<P><STRONG><a name="[254]"></a>GMMotorHandler::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cpp_solution.o(.text._ZN14GMMotorHandler8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = GMMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::GMMotorHandler()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_callback_cpp
</UL>

<P><STRONG><a name="[256]"></a>GMMotorHandler::GMMotorHandler()</STRONG> (Thumb, 246 bytes, Stack size 36 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandlerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GMMotorHandler::GMMotorHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
</UL>

<P><STRONG><a name="[33d]"></a>GMMotorHandler::GMMotorHandler__sub_object()</STRONG> (Thumb, 246 bytes, Stack size 36 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandlerC2Ev), UNUSED)

<P><STRONG><a name="[87]"></a>GMMotorHandler::~GMMotorHandler()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandlerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GMMotorHandler::~GMMotorHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_solution.o(.text._ZN14GMMotorHandler8instanceEv)
</UL>
<P><STRONG><a name="[33e]"></a>GMMotorHandler::~GMMotorHandler__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gmmotorhandler.o(.text._ZN14GMMotorHandlerD2Ev), UNUSED)

<P><STRONG><a name="[9c]"></a>GimbalStateFPS::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN14GimbalStateFPS3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalStateFPS::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
</UL>
<P><STRONG><a name="[9b]"></a>GimbalStateFPS::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN14GimbalStateFPS4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GimbalStateFPS::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
</UL>
<P><STRONG><a name="[98]"></a>GimbalStateFPS::init()</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, gimbalstatefps.o(.text._ZN14GimbalStateFPS4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GimbalStateFPS::init() &rArr; AHRS::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetUpdatePeriod(float)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetTau(float)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
</UL>
<P><STRONG><a name="[99]"></a>GimbalStateFPS::enter()</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN14GimbalStateFPS5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GimbalStateFPS::enter() &rArr; ChassisController::instance() &rArr; ChassisController::ChassisController__sub_object() &rArr; ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::instance()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::FloatConstrain(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
</UL>
<P><STRONG><a name="[9a]"></a>GimbalStateFPS::execute()</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, gimbalstatefps.o(.text._ZN14GimbalStateFPS7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GimbalStateFPS::execute() &rArr; AHRS::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::GetResult()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::Update()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetInput(float)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.rodata._ZTV14GimbalStateFPS)
</UL>
<P><STRONG><a name="[263]"></a>GimbalStateFPS::GimbalStateFPS__sub_object(GM6020*, GM6020*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, chassisstatefps.o(.text._ZN14GimbalStateFPSC2EP6GM6020S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GimbalStateFPS::GimbalStateFPS__sub_object(GM6020*, GM6020*) &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
</UL>

<P><STRONG><a name="[265]"></a>GimbalStateFPS::~GimbalStateFPS__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chassisstatefps.o(.text._ZN14GimbalStateFPSD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GimbalStateFPS::~GimbalStateFPS__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController__sub_object()
</UL>

<P><STRONG><a name="[283]"></a>LKMotorHandler::registerMotor(LKMotor*, CAN_HandleTypeDef*, unsigned short)</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandler13registerMotorEP7LKMotorP17CAN_HandleTypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LKMotorHandler::registerMotor(LKMotor*, CAN_HandleTypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
</UL>

<P><STRONG><a name="[267]"></a>LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandler14processRawDataEP17CAN_HandleTypeDefPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::updateFeedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_callback_cpp
</UL>

<P><STRONG><a name="[268]"></a>LKMotorHandler::updateFeedback()</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandler14updateFeedbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LoopFloatConstrain(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>

<P><STRONG><a name="[20d]"></a>LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*)</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandler15sendControlDataEP17CAN_HandleTypeDefS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*) &rArr; can_sendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[26b]"></a>LKMotorHandler::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cpp_solution.o(.text._ZN14LKMotorHandler8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LKMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::LKMotorHandler()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_callback_cpp
</UL>

<P><STRONG><a name="[26c]"></a>LKMotorHandler::LKMotorHandler()</STRONG> (Thumb, 188 bytes, Stack size 28 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandlerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LKMotorHandler::LKMotorHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
</UL>

<P><STRONG><a name="[33f]"></a>LKMotorHandler::LKMotorHandler__sub_object()</STRONG> (Thumb, 188 bytes, Stack size 28 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandlerC2Ev), UNUSED)

<P><STRONG><a name="[88]"></a>LKMotorHandler::~LKMotorHandler()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandlerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LKMotorHandler::~LKMotorHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_solution.o(.text._ZN14LKMotorHandler8instanceEv)
</UL>
<P><STRONG><a name="[340]"></a>LKMotorHandler::~LKMotorHandler__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lkmotorhandler.o(.text._ZN14LKMotorHandlerD2Ev), UNUSED)

<P><STRONG><a name="[2cd]"></a>bmi088_error_t::bmi088_error_t__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bmi088.o(.text._ZN14bmi088_error_tC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bmi088_error_t::bmi088_error_t__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088()
</UL>

<P><STRONG><a name="[a1]"></a>ChassisStateFPS::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chassisstatefps.o(.text._ZN15ChassisStateFPS3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisStateFPS::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
</UL>
<P><STRONG><a name="[a0]"></a>ChassisStateFPS::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassisstatefps.o(.text._ZN15ChassisStateFPS4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisStateFPS::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
</UL>
<P><STRONG><a name="[9d]"></a>ChassisStateFPS::init()</STRONG> (Thumb, 256 bytes, Stack size 80 bytes, chassisstatefps.o(.text._ZN15ChassisStateFPS4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ChassisStateFPS::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetUpdatePeriod(float)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetTau(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
</UL>
<P><STRONG><a name="[9e]"></a>ChassisStateFPS::enter()</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, chassisstatefps.o(.text._ZN15ChassisStateFPS5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ChassisStateFPS::enter() &rArr; GimbalController::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::instance()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::GetResult()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::Update()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetInput(float)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
</UL>
<P><STRONG><a name="[9f]"></a>ChassisStateFPS::execute()</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, chassisstatefps.o(.text._ZN15ChassisStateFPS7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChassisStateFPS::execute() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatefps.o(.rodata._ZTV15ChassisStateFPS)
</UL>
<P><STRONG><a name="[271]"></a>ChassisStateFPS::ChassisStateFPS__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN15ChassisStateFPSC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateFPS::ChassisStateFPS__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
</UL>

<P><STRONG><a name="[273]"></a>ChassisStateFPS::~ChassisStateFPS__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN15ChassisStateFPSD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateFPS::~ChassisStateFPS__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::~ChassisController__sub_object()
</UL>

<P><STRONG><a name="[25b]"></a>FirstOrderFilter::SetUpdatePeriod(float)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lk9025.o(.text._ZN16FirstOrderFilter15SetUpdatePeriodEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FirstOrderFilter::SetUpdatePeriod(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::init()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::init()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::LK9025()
</UL>

<P><STRONG><a name="[25a]"></a>FirstOrderFilter::SetTau(float)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lk9025.o(.text._ZN16FirstOrderFilter6SetTauEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FirstOrderFilter::SetTau(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::init()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::init()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::LK9025()
</UL>

<P><STRONG><a name="[260]"></a>FirstOrderFilter::Update()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gimbalstatefps.o(.text._ZN16FirstOrderFilter6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FirstOrderFilter::Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::enter()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::enter()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::execute()
</UL>

<P><STRONG><a name="[25f]"></a>FirstOrderFilter::SetInput(float)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gimbalstatefps.o(.text._ZN16FirstOrderFilter8SetInputEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FirstOrderFilter::SetInput(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::enter()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::enter()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::execute()
</UL>

<P><STRONG><a name="[261]"></a>FirstOrderFilter::GetResult()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gimbalstatefps.o(.text._ZN16FirstOrderFilter9GetResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FirstOrderFilter::GetResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::enter()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::enter()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::execute()
</UL>

<P><STRONG><a name="[a2]"></a>GimbalController::run()</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, gimbalcontroller.o(.text._ZN16GimbalController3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GimbalController::run() &rArr; GimbalStateFPS::init() &rArr; AHRS::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::run()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::init()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::run()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::run()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::init()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalcontroller.o(.rodata._ZTV16GimbalController)
</UL>
<P><STRONG><a name="[274]"></a>GimbalController::init()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gimbalcontroller.o(.text._ZN16GimbalController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GimbalController::init() &rArr; GMMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::setOutput()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[270]"></a>GimbalController::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, chassisstatefps.o(.text._ZN16GimbalController8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = GimbalController::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::enter()
</UL>

<P><STRONG><a name="[276]"></a>GimbalController::GimbalController__sub_object()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, chassisstatefps.o(.text._ZN16GimbalControllerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GimbalController::GimbalController__sub_object() &rArr; GM6020::GM6020() &rArr; GMMotor::GMMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::GM6020()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::GimbalStateFPS__sub_object(GM6020*, GM6020*)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::GimbalStateRemoteControl__sub_object(GM6020*, GM6020*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::GimbalStateSearch__sub_object(GM6020*, GM6020*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::GimbalStateRelax__sub_object(GM6020*, GM6020*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::instance()
</UL>

<P><STRONG><a name="[89]"></a>GimbalController::~GimbalController__sub_object()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, chassisstatefps.o(.text._ZN16GimbalControllerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GimbalController::~GimbalController__sub_object() &rArr; GimbalStateRelax::~GimbalStateRelax__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::~GM6020()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::~GimbalStateRelax__sub_object()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::~GimbalStateSearch__sub_object()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::~GimbalStateRemoteControl__sub_object()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::~GimbalStateFPS__sub_object()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::~Controller__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatefps.o(.text._ZN16GimbalController8instanceEv)
</UL>
<P><STRONG><a name="[a7]"></a>GimbalStateRelax::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gimbalstaterelax.o(.text._ZN16GimbalStateRelax3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalStateRelax::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
</UL>
<P><STRONG><a name="[a6]"></a>GimbalStateRelax::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstaterelax.o(.text._ZN16GimbalStateRelax4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GimbalStateRelax::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
</UL>
<P><STRONG><a name="[a3]"></a>GimbalStateRelax::init()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gimbalstaterelax.o(.text._ZN16GimbalStateRelax4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GimbalStateRelax::init() &rArr; Pid::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
</UL>
<P><STRONG><a name="[a4]"></a>GimbalStateRelax::enter()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gimbalstaterelax.o(.text._ZN16GimbalStateRelax5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GimbalStateRelax::enter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
</UL>
<P><STRONG><a name="[a5]"></a>GimbalStateRelax::execute()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gimbalstaterelax.o(.text._ZN16GimbalStateRelax7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalStateRelax::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstaterelax.o(.rodata._ZTV16GimbalStateRelax)
</UL>
<P><STRONG><a name="[279]"></a>GimbalStateRelax::GimbalStateRelax__sub_object(GM6020*, GM6020*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, chassisstatefps.o(.text._ZN16GimbalStateRelaxC2EP6GM6020S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GimbalStateRelax::GimbalStateRelax__sub_object(GM6020*, GM6020*) &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
</UL>

<P><STRONG><a name="[27e]"></a>GimbalStateRelax::~GimbalStateRelax__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chassisstatefps.o(.text._ZN16GimbalStateRelaxD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GimbalStateRelax::~GimbalStateRelax__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController__sub_object()
</UL>

<P><STRONG><a name="[a8]"></a>BalanceController::run()</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, balancecontroller.o(.text._ZN17BalanceController3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = BalanceController::run() &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::run()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::run()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::init()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::run()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancecontroller.o(.rodata._ZTV17BalanceController)
</UL>
<P><STRONG><a name="[282]"></a>BalanceController::init()</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, balancecontroller.o(.text._ZN17BalanceController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BalanceController::init() &rArr; LKMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::registerMotor(LKMotor*, CAN_HandleTypeDef*, unsigned short)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::setOutput()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK8016::setOutput()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[284]"></a>BalanceController::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN17BalanceController8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = BalanceController::instance() &rArr; BalanceController::BalanceController__sub_object() &rArr; BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*) &rArr; cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
</UL>

<P><STRONG><a name="[285]"></a>BalanceController::BalanceController__sub_object()</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, cpp_main.o(.text._ZN17BalanceControllerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = BalanceController::BalanceController__sub_object() &rArr; BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*) &rArr; cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::BalanceSpeedControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::BalanceStateRelax__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::LK9025()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK8016::LK8016()
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::instance()
</UL>

<P><STRONG><a name="[8a]"></a>BalanceController::~BalanceController__sub_object()</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cpp_main.o(.text._ZN17BalanceControllerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BalanceController::~BalanceController__sub_object() &rArr; BalanceStateRelax::~BalanceStateRelax__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::~BalanceStateRelax__sub_object()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::~BalanceRemoteControl__sub_object()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::~BalanceSpeedControl__sub_object()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::~BalanceStandControl__sub_object()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::~Controller__sub_object()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::~LK9025()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK8016::~LK8016()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_main.o(.text._ZN17BalanceController8instanceEv)
</UL>
<P><STRONG><a name="[ad]"></a>BalanceStateRelax::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, balancestaterelax.o(.text._ZN17BalanceStateRelax3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceStateRelax::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[ac]"></a>BalanceStateRelax::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, balancestaterelax.o(.text._ZN17BalanceStateRelax4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BalanceStateRelax::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[a9]"></a>BalanceStateRelax::init()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, balancestaterelax.o(.text._ZN17BalanceStateRelax4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BalanceStateRelax::init() &rArr; Pid::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[aa]"></a>BalanceStateRelax::enter()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, balancestaterelax.o(.text._ZN17BalanceStateRelax5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BalanceStateRelax::enter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[ab]"></a>BalanceStateRelax::execute()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, balancestaterelax.o(.text._ZN17BalanceStateRelax7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceStateRelax::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestaterelax.o(.rodata._ZTV17BalanceStateRelax)
</UL>
<P><STRONG><a name="[288]"></a>BalanceStateRelax::BalanceStateRelax__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, cpp_main.o(.text._ZN17BalanceStateRelaxC2EP6LK9025S1_P6LK8016S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BalanceStateRelax::BalanceStateRelax__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*) &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
</UL>

<P><STRONG><a name="[28f]"></a>BalanceStateRelax::~BalanceStateRelax__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN17BalanceStateRelaxD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BalanceStateRelax::~BalanceStateRelax__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
</UL>

<P><STRONG><a name="[26f]"></a>BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, boardconnectivity.o(.text._ZN17BoardConnectivity28BoardConnectivity_Add2MemoryEPhttNS_21BoardConnectivityTypeENS_26BoardConnectivityDirectionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::execute()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::execute()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::execute()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::init()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::execute()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::init()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>

<P><STRONG><a name="[26e]"></a>BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, boardconnectivity.o(.text._ZN17BoardConnectivity28BoardConnectivity_Float2ByteEfPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::execute()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::execute()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::execute()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::init()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::execute()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::init()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>

<P><STRONG><a name="[294]"></a>BoardConnectivity::init()</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, boardconnectivity.o(.text._ZN17BoardConnectivity4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BoardConnectivity::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity()
</UL>

<P><STRONG><a name="[26d]"></a>BoardConnectivity::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, chassisstaterelax.o(.text._ZN17BoardConnectivity8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::execute()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::execute()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::execute()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::init()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::execute()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::init()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>

<P><STRONG><a name="[293]"></a>BoardConnectivity::BoardConnectivity()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, boardconnectivity.o(.text._ZN17BoardConnectivityC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BoardConnectivity::BoardConnectivity() &rArr; BoardConnectivity::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>

<P><STRONG><a name="[341]"></a>BoardConnectivity::BoardConnectivity__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, boardconnectivity.o(.text._ZN17BoardConnectivityC2Ev), UNUSED)

<P><STRONG><a name="[8b]"></a>BoardConnectivity::~BoardConnectivity()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, boardconnectivity.o(.text._ZN17BoardConnectivityD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BoardConnectivity::~BoardConnectivity() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.text._ZN17BoardConnectivity8instanceEv)
</UL>
<P><STRONG><a name="[342]"></a>BoardConnectivity::~BoardConnectivity__sub_object()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, boardconnectivity.o(.text._ZN17BoardConnectivityD2Ev), UNUSED)

<P><STRONG><a name="[ae]"></a>ChassisController::run()</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, chassiscontroller.o(.text._ZN17ChassisController3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ChassisController::run() &rArr; ChassisStateFPS::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::run()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::run()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::init()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::run()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroller.o(.rodata._ZTV17ChassisController)
</UL>
<P><STRONG><a name="[295]"></a>ChassisController::init()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, chassiscontroller.o(.text._ZN17ChassisController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
</UL>

<P><STRONG><a name="[25e]"></a>ChassisController::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN17ChassisController8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ChassisController::instance() &rArr; ChassisController::ChassisController__sub_object() &rArr; ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::enter()
</UL>

<P><STRONG><a name="[296]"></a>ChassisController::ChassisController__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN17ChassisControllerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ChassisController::ChassisController__sub_object() &rArr; ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::init()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::ChassisStateFPS__sub_object()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::ChassisStateRotate__sub_object()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::ChassisStateRelax__sub_object()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::ChassisStateRemoteControl__sub_object()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::instance()
</UL>

<P><STRONG><a name="[8c]"></a>ChassisController::~ChassisController__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN17ChassisControllerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ChassisController::~ChassisController__sub_object() &rArr; ChassisStateRemoteControl::~ChassisStateRemoteControl__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::~Controller__sub_object()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::~ChassisStateRemoteControl__sub_object()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRelax::~ChassisStateRelax__sub_object()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::~ChassisStateRotate__sub_object()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::~ChassisStateFPS__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.text._ZN17ChassisController8instanceEv)
</UL>
<P><STRONG><a name="[b3]"></a>ChassisStateRelax::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chassisstaterelax.o(.text._ZN17ChassisStateRelax3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisStateRelax::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
</UL>
<P><STRONG><a name="[b2]"></a>ChassisStateRelax::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassisstaterelax.o(.text._ZN17ChassisStateRelax4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisStateRelax::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
</UL>
<P><STRONG><a name="[af]"></a>ChassisStateRelax::init()</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, chassisstaterelax.o(.text._ZN17ChassisStateRelax4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChassisStateRelax::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
</UL>
<P><STRONG><a name="[b0]"></a>ChassisStateRelax::enter()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, chassisstaterelax.o(.text._ZN17ChassisStateRelax5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisStateRelax::enter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
</UL>
<P><STRONG><a name="[b1]"></a>ChassisStateRelax::execute()</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, chassisstaterelax.o(.text._ZN17ChassisStateRelax7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChassisStateRelax::execute() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterelax.o(.rodata._ZTV17ChassisStateRelax)
</UL>
<P><STRONG><a name="[298]"></a>ChassisStateRelax::ChassisStateRelax__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN17ChassisStateRelaxC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateRelax::ChassisStateRelax__sub_object() &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
</UL>

<P><STRONG><a name="[29b]"></a>ChassisStateRelax::~ChassisStateRelax__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN17ChassisStateRelaxD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateRelax::~ChassisStateRelax__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::~ChassisController__sub_object()
</UL>

<P><STRONG><a name="[b8]"></a>GimbalStateSearch::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gimbalstatesearch.o(.text._ZN17GimbalStateSearch3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalStateSearch::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
</UL>
<P><STRONG><a name="[b7]"></a>GimbalStateSearch::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatesearch.o(.text._ZN17GimbalStateSearch4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GimbalStateSearch::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
</UL>
<P><STRONG><a name="[b4]"></a>GimbalStateSearch::init()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gimbalstatesearch.o(.text._ZN17GimbalStateSearch4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GimbalStateSearch::init() &rArr; Pid::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
</UL>
<P><STRONG><a name="[b5]"></a>GimbalStateSearch::enter()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstatesearch.o(.text._ZN17GimbalStateSearch5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GimbalStateSearch::enter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
</UL>
<P><STRONG><a name="[b6]"></a>GimbalStateSearch::execute()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gimbalstatesearch.o(.text._ZN17GimbalStateSearch7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GimbalStateSearch::execute() &rArr; AHRS::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatesearch.o(.rodata._ZTV17GimbalStateSearch)
</UL>
<P><STRONG><a name="[27a]"></a>GimbalStateSearch::GimbalStateSearch__sub_object(GM6020*, GM6020*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, chassisstatefps.o(.text._ZN17GimbalStateSearchC2EP6GM6020S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GimbalStateSearch::GimbalStateSearch__sub_object(GM6020*, GM6020*) &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
</UL>

<P><STRONG><a name="[27d]"></a>GimbalStateSearch::~GimbalStateSearch__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chassisstatefps.o(.text._ZN17GimbalStateSearchD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GimbalStateSearch::~GimbalStateSearch__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController__sub_object()
</UL>

<P><STRONG><a name="[b9]"></a>ShooterController::run()</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, shootercontroller.o(.text._ZN17ShooterController3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ShooterController::run() &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::setOutput()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::setOutput()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shootercontroller.o(.rodata._ZTV17ShooterController)
</UL>
<P><STRONG><a name="[29d]"></a>ShooterController::init()</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, shootercontroller.o(.text._ZN17ShooterController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ShooterController::init() &rArr; GMMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::registerMotor(GMMotor*, CAN_HandleTypeDef*, unsigned short)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::setOutput()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::setOutput()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[29e]"></a>ShooterController::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN17ShooterController8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ShooterController::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::ShooterController__sub_object()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
</UL>

<P><STRONG><a name="[29f]"></a>ShooterController::ShooterController__sub_object()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN17ShooterControllerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ShooterController::ShooterController__sub_object() &rArr; GM3508::GM3508() &rArr; GMMotor::GMMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::GM3508()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::GM2006()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
</UL>

<P><STRONG><a name="[8d]"></a>ShooterController::~ShooterController__sub_object()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cpp_main.o(.text._ZN17ShooterControllerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ShooterController::~ShooterController__sub_object() &rArr; GM3508::~GM3508()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::~GM3508()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::~GM2006()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::~Controller__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_main.o(.text._ZN17ShooterController8instanceEv)
</UL>
<P><STRONG><a name="[be]"></a>ChassisStateRotate::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chassisstaterotate.o(.text._ZN18ChassisStateRotate3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisStateRotate::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
</UL>
<P><STRONG><a name="[bd]"></a>ChassisStateRotate::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassisstaterotate.o(.text._ZN18ChassisStateRotate4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisStateRotate::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
</UL>
<P><STRONG><a name="[ba]"></a>ChassisStateRotate::init()</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, chassisstaterotate.o(.text._ZN18ChassisStateRotate4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChassisStateRotate::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
</UL>
<P><STRONG><a name="[bb]"></a>ChassisStateRotate::enter()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, chassisstaterotate.o(.text._ZN18ChassisStateRotate5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ChassisStateRotate::enter() &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
</UL>
<P><STRONG><a name="[bc]"></a>ChassisStateRotate::execute()</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, chassisstaterotate.o(.text._ZN18ChassisStateRotate7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChassisStateRotate::execute() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterotate.o(.rodata._ZTV18ChassisStateRotate)
</UL>
<P><STRONG><a name="[299]"></a>ChassisStateRotate::ChassisStateRotate__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN18ChassisStateRotateC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateRotate::ChassisStateRotate__sub_object() &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
</UL>

<P><STRONG><a name="[29a]"></a>ChassisStateRotate::~ChassisStateRotate__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN18ChassisStateRotateD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateRotate::~ChassisStateRotate__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::~ChassisController__sub_object()
</UL>

<P><STRONG><a name="[c3]"></a>BalanceSpeedControl::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, balancespeedcontrol.o(.text._ZN19BalanceSpeedControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceSpeedControl::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
</UL>
<P><STRONG><a name="[c2]"></a>BalanceSpeedControl::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, balancespeedcontrol.o(.text._ZN19BalanceSpeedControl4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BalanceSpeedControl::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
</UL>
<P><STRONG><a name="[bf]"></a>BalanceSpeedControl::init()</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, balancespeedcontrol.o(.text._ZN19BalanceSpeedControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BalanceSpeedControl::init() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
</UL>
<P><STRONG><a name="[c0]"></a>BalanceSpeedControl::enter()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, balancespeedcontrol.o(.text._ZN19BalanceSpeedControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = BalanceSpeedControl::enter() &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
</UL>
<P><STRONG><a name="[c1]"></a>BalanceSpeedControl::execute()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, balancespeedcontrol.o(.text._ZN19BalanceSpeedControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BalanceSpeedControl::execute() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancespeedcontrol.o(.rodata._ZTV19BalanceSpeedControl)
</UL>
<P><STRONG><a name="[28a]"></a>BalanceSpeedControl::BalanceSpeedControl__sub_object(LK9025*, LK9025*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cpp_main.o(.text._ZN19BalanceSpeedControlC2EP6LK9025S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BalanceSpeedControl::BalanceSpeedControl__sub_object(LK9025*, LK9025*) &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
</UL>

<P><STRONG><a name="[28d]"></a>BalanceSpeedControl::~BalanceSpeedControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN19BalanceSpeedControlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BalanceSpeedControl::~BalanceSpeedControl__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
</UL>

<P><STRONG><a name="[c8]"></a>BalanceStandControl::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, balancestandcontrol.o(.text._ZN19BalanceStandControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceStandControl::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[c7]"></a>BalanceStandControl::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, balancestandcontrol.o(.text._ZN19BalanceStandControl4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BalanceStandControl::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[c4]"></a>BalanceStandControl::init()</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, balancestandcontrol.o(.text._ZN19BalanceStandControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BalanceStandControl::init() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[c5]"></a>BalanceStandControl::enter()</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, balancestandcontrol.o(.text._ZN19BalanceStandControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = BalanceStandControl::enter() &rArr; cVelFusionKF::UpdateKalman(float, float) &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::GetVhat()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::GetXhat()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::UpdateKalman(float, float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quaternion_product_f32
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[c6]"></a>BalanceStandControl::execute()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, balancestandcontrol.o(.text._ZN19BalanceStandControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BalanceStandControl::execute() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balancestandcontrol.o(.rodata._ZTV19BalanceStandControl)
</UL>
<P><STRONG><a name="[28b]"></a>BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cpp_main.o(.text._ZN19BalanceStandControlC2EP6LK9025S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*) &rArr; cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::cVelFusionKF__sub_object()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
</UL>

<P><STRONG><a name="[28c]"></a>BalanceStandControl::~BalanceStandControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN19BalanceStandControlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BalanceStandControl::~BalanceStandControl__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
</UL>

<P><STRONG><a name="[cd]"></a>BalanceRemoteControl::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, balanceremotecontrol.o(.text._ZN20BalanceRemoteControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceRemoteControl::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[cc]"></a>BalanceRemoteControl::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, balanceremotecontrol.o(.text._ZN20BalanceRemoteControl4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BalanceRemoteControl::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[c9]"></a>BalanceRemoteControl::init()</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, balanceremotecontrol.o(.text._ZN20BalanceRemoteControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BalanceRemoteControl::init() &rArr; TASK_CONTROL::LQR::InitMatX(arm_matrix_instance_f32*, arm_matrix_instance_f32*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::InitMatX(arm_matrix_instance_f32*, arm_matrix_instance_f32*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[ca]"></a>BalanceRemoteControl::enter()</STRONG> (Thumb, 640 bytes, Stack size 136 bytes, balanceremotecontrol.o(.text._ZN20BalanceRemoteControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = BalanceRemoteControl::enter() &rArr; cVelFusionKF::UpdateKalman(float, float) &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::LQRCal(float*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::refreshLQRK(float)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::GetVhat()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::GetXhat()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::UpdateKalman(float, float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quaternion_product_f32
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[cb]"></a>BalanceRemoteControl::execute()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, balanceremotecontrol.o(.text._ZN20BalanceRemoteControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BalanceRemoteControl::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balanceremotecontrol.o(.rodata._ZTV20BalanceRemoteControl)
</UL>
<P><STRONG><a name="[289]"></a>BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, cpp_main.o(.text._ZN20BalanceRemoteControlC2EP6LK9025S1_P6LK8016S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*) &rArr; cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::LQR__sub_object()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::cLinkSolver__sub_object()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cVelFusionKF::cVelFusionKF__sub_object()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
</UL>

<P><STRONG><a name="[28e]"></a>BalanceRemoteControl::~BalanceRemoteControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cpp_main.o(.text._ZN20BalanceRemoteControlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BalanceRemoteControl::~BalanceRemoteControl__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
</UL>

<P><STRONG><a name="[d2]"></a>GimbalStateRemoteControl::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalStateRemoteControl::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
</UL>
<P><STRONG><a name="[d1]"></a>GimbalStateRemoteControl::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GimbalStateRemoteControl::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
</UL>
<P><STRONG><a name="[ce]"></a>GimbalStateRemoteControl::init()</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GimbalStateRemoteControl::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
</UL>
<P><STRONG><a name="[cf]"></a>GimbalStateRemoteControl::enter()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GimbalStateRemoteControl::enter() &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LoopFloatConstrain(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
</UL>
<P><STRONG><a name="[d0]"></a>GimbalStateRemoteControl::execute()</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, gimbalstateremotecontrol.o(.text._ZN24GimbalStateRemoteControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GimbalStateRemoteControl::execute() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstateremotecontrol.o(.rodata._ZTV24GimbalStateRemoteControl)
</UL>
<P><STRONG><a name="[27b]"></a>GimbalStateRemoteControl::GimbalStateRemoteControl__sub_object(GM6020*, GM6020*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, chassisstatefps.o(.text._ZN24GimbalStateRemoteControlC2EP6GM6020S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GimbalStateRemoteControl::GimbalStateRemoteControl__sub_object(GM6020*, GM6020*) &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
</UL>

<P><STRONG><a name="[27c]"></a>GimbalStateRemoteControl::~GimbalStateRemoteControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, chassisstatefps.o(.text._ZN24GimbalStateRemoteControlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GimbalStateRemoteControl::~GimbalStateRemoteControl__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController__sub_object()
</UL>

<P><STRONG><a name="[d7]"></a>ChassisStateRemoteControl::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisStateRemoteControl::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
</UL>
<P><STRONG><a name="[d6]"></a>ChassisStateRemoteControl::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisStateRemoteControl::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
</UL>
<P><STRONG><a name="[d3]"></a>ChassisStateRemoteControl::init()</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ChassisStateRemoteControl::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetUpdatePeriod(float)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetTau(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
</UL>
<P><STRONG><a name="[d4]"></a>ChassisStateRemoteControl::enter()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl5enterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ChassisStateRemoteControl::enter() &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::GetResult()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::Update()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetInput(float)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
</UL>
<P><STRONG><a name="[d5]"></a>ChassisStateRemoteControl::execute()</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, chassisstateremotecontrol.o(.text._ZN25ChassisStateRemoteControl7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChassisStateRemoteControl::execute() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Float2Byte(float, unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::BoardConnectivity_Add2Memory(unsigned char*, unsigned short, unsigned short, BoardConnectivity::BoardConnectivityType, BoardConnectivity::BoardConnectivityDirection)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstateremotecontrol.o(.rodata._ZTV25ChassisStateRemoteControl)
</UL>
<P><STRONG><a name="[297]"></a>ChassisStateRemoteControl::ChassisStateRemoteControl__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN25ChassisStateRemoteControlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateRemoteControl::ChassisStateRemoteControl__sub_object() &rArr; StateMachine::StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController__sub_object()
</UL>

<P><STRONG><a name="[29c]"></a>ChassisStateRemoteControl::~ChassisStateRemoteControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gimbalstatefps.o(.text._ZN25ChassisStateRemoteControlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisStateRemoteControl::~ChassisStateRemoteControl__sub_object() &rArr; StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::~StateMachine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::~ChassisController__sub_object()
</UL>

<P><STRONG><a name="[262]"></a>Pid::UpdateResult()</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, pid.o(.text._ZN3Pid12UpdateResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LimitMax(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::TemperatureControl(float)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::setOutput()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::setOutput()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::setOutput()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::execute()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::execute()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::enter()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::execute()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::execute()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::execute()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::setOutput()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK8016::setOutput()
</UL>

<P><STRONG><a name="[2aa]"></a>Pid::Init()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pid.o(.text._ZN3Pid4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Pid::Init() &rArr; Pid::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[281]"></a>Pid::Clear()</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, pid.o(.text._ZN3Pid5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Init()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::init()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStateRelax::init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::init()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::init()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRelax::init()
</UL>

<P><STRONG><a name="[272]"></a>Pid::Pid()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, pid.o(.text._ZN3PidC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::BalanceStandControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::BalanceSpeedControl__sub_object(LK9025*, LK9025*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::ChassisStateFPS__sub_object()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object()
</UL>

<P><STRONG><a name="[343]"></a>Pid::Pid__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, pid.o(.text._ZN3PidC2Ev), UNUSED)

<P><STRONG><a name="[2ab]"></a>AHRS::AHRS_Update()</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, ahrs.o(.text._ZN4AHRS11AHRS_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = AHRS::AHRS_Update() &rArr; IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::EarthFrameToBodyFrame(float const*, float*, float*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::BodyFrameToEarthFrame(float const*, float*, float*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaT
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_update
</UL>

<P><STRONG><a name="[2af]"></a>AHRS::InitQuaternion(float*)</STRONG> (Thumb, 372 bytes, Stack size 88 bytes, ahrs.o(.text._ZN4AHRS14InitQuaternionEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = AHRS::InitQuaternion(float*) &rArr; BMI088::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross3d
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot3d
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norm3d
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
</UL>

<P><STRONG><a name="[2ad]"></a>AHRS::BodyFrameToEarthFrame(float const*, float*, float*)</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, ahrs.o(.text._ZN4AHRS21BodyFrameToEarthFrameEPKfPfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AHRS::BodyFrameToEarthFrame(float const*, float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[2ae]"></a>AHRS::EarthFrameToBodyFrame(float const*, float*, float*)</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, ahrs.o(.text._ZN4AHRS21EarthFrameToBodyFrameEPKfPfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AHRS::EarthFrameToBodyFrame(float const*, float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>

<P><STRONG><a name="[2b5]"></a>AHRS::INS_Init()</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ahrs.o(.text._ZN4AHRS8INS_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = AHRS::INS_Init() &rArr; AHRS::InitQuaternion(float*) &rArr; BMI088::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaT
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[258]"></a>AHRS::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cpp_solution.o(.text._ZN4AHRS8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = AHRS::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS__sub_object()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::execute()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateSearch::execute()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_update
</UL>

<P><STRONG><a name="[2b6]"></a>AHRS::AHRS__sub_object()</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, cpp_solution.o(.text._ZN4AHRSC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AHRS::AHRS__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
</UL>

<P><STRONG><a name="[8e]"></a>AHRS::~AHRS__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, cpp_solution.o(.text._ZN4AHRSD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AHRS::~AHRS__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_solution.o(.text._ZN4AHRS8instanceEv)
</UL>
<P><STRONG><a name="[20b]"></a>Dr16::updateData()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dr16.o(.text._ZN4Dr1610updateDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dr16::updateData() &rArr; Dr16::updateRcStatus() &rArr; Dr16::mapAvix(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateKeyStatus()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateRcStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2b7]"></a>Dr16::updateRcStatus()</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, dr16.o(.text._ZN4Dr1614updateRcStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dr16::updateRcStatus() &rArr; Dr16::mapAvix(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::mapAvix(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateData()
</UL>

<P><STRONG><a name="[2b8]"></a>Dr16::updateKeyStatus()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dr16.o(.text._ZN4Dr1615updateKeyStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dr16::updateKeyStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateData()
</UL>

<P><STRONG><a name="[2b9]"></a>Dr16::mapAvix(short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dr16.o(.text._ZN4Dr167mapAvixEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dr16::mapAvix(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::updateRcStatus()
</UL>

<P><STRONG><a name="[25c]"></a>Dr16::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gimbalcontroller.o(.text._ZN4Dr168instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceSpeedControl::enter()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::run()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::run()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateFPS::enter()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRotate::enter()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRemoteControl::enter()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::run()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::enter()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::enter()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::run()
</UL>

<P><STRONG><a name="[2ba]"></a>Dr16::Dr16()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dr16.o(.text._ZN4Dr16C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dr16::Dr16() &rArr; Dr16::mapAvix(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_raw
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::mapAvix(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>

<P><STRONG><a name="[344]"></a>Dr16::Dr16__sub_object()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dr16.o(.text._ZN4Dr16C2Ev), UNUSED)

<P><STRONG><a name="[8f]"></a>Dr16::~Dr16()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, dr16.o(.text._ZN4Dr16D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Dr16::~Dr16()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalcontroller.o(.text._ZN4Dr168instanceEv)
</UL>
<P><STRONG><a name="[345]"></a>Dr16::~Dr16__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, dr16.o(.text._ZN4Dr16D2Ev), UNUSED)

<P><STRONG><a name="[25d]"></a>Math::FloatConstrain(float, float, float)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lk8016.o(.text._ZN4Math14FloatConstrainEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Math::FloatConstrain(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::enter()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::setOutput()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK8016::setOutput()
</UL>

<P><STRONG><a name="[269]"></a>Math::LoopFloatConstrain(float, float, float)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lkmotorhandler.o(.text._ZN4Math18LoopFloatConstrainEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__math::fmod[abi:nn190000](float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateRemoteControl::enter()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::updateFeedback()
</UL>

<P><STRONG><a name="[2a9]"></a>Math::LimitMax(float, float)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, pid.o(.text._ZN4Math8LimitMaxEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Math::LimitMax(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>

<P><STRONG><a name="[2bd]"></a>BMI088::BMI088_INIT()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bmi088.o(.text._ZN6BMI08811BMI088_INITEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Init()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyGyroData()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyAccData()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyGyroChipID()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyAccChipID()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_CONF_INIT()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[2c3]"></a>BMI088::ReadAccData(acc_data_t*)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, bmi088.o(.text._ZN6BMI08811ReadAccDataEP10acc_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BMI088::ReadAccData(acc_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[2c5]"></a>BMI088::ReadGyroData(gyro_data_t*)</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, bmi088.o(.text._ZN6BMI08812ReadGyroDataEP11gyro_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[2c1]"></a>BMI088::VerifyAccData()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bmi088.o(.text._ZN6BMI08813VerifyAccDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BMI088::VerifyAccData()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[2c2]"></a>BMI088::VerifyGyroData()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bmi088.o(.text._ZN6BMI08814VerifyGyroDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BMI088::VerifyGyroData()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[2c6]"></a>BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, bmi088.o(.text._ZN6BMI08814WriteDataToRegE13BMI088_SENSORhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_sendData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_CONF_INIT()
</UL>

<P><STRONG><a name="[2c4]"></a>BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, bmi088.o(.text._ZN6BMI08815ReadDataFromRegE13BMI088_SENSORhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readData
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccTemperature(float*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadGyroData(gyro_data_t*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccData(acc_data_t*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyGyroChipID()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::VerifyAccChipID()
</UL>

<P><STRONG><a name="[2bf]"></a>BMI088::VerifyAccChipID()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bmi088.o(.text._ZN6BMI08815VerifyAccChipIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BMI088::VerifyAccChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[2be]"></a>BMI088::BMI088_CONF_INIT()</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, bmi088.o(.text._ZN6BMI08816BMI088_CONF_INITEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BMI088::BMI088_CONF_INIT() &rArr; BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_sendData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[2c0]"></a>BMI088::VerifyGyroChipID()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bmi088.o(.text._ZN6BMI08816VerifyGyroChipIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
</UL>

<P><STRONG><a name="[2c9]"></a>BMI088::ReadAccTemperature(float*)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bmi088.o(.text._ZN6BMI08818ReadAccTemperatureEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BMI088::ReadAccTemperature(float*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[2ca]"></a>BMI088::TemperatureControl(float)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bmi088.o(.text._ZN6BMI08818TemperatureControlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BMI088::TemperatureControl(float) &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDutyRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::update()
</UL>

<P><STRONG><a name="[20c]"></a>BMI088::update()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bmi088.o(.text._ZN6BMI0886updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BMI088::update() &rArr; BMI088::ReadGyroData(gyro_data_t*) &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccTemperature(float*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadGyroData(gyro_data_t*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadAccData(acc_data_t*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::TemperatureControl(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2ac]"></a>BMI088::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ahrs.o(.text._ZN6BMI0888instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BMI088::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[2cc]"></a>BMI088::BMI088()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bmi088.o(.text._ZN6BMI088C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BMI088::BMI088() &rArr; bmi088_error_t::bmi088_error_t__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_error_t::bmi088_error_t__sub_object()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
</UL>

<P><STRONG><a name="[346]"></a>BMI088::BMI088__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bmi088.o(.text._ZN6BMI088C2Ev), UNUSED)

<P><STRONG><a name="[90]"></a>BMI088::~BMI088()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, bmi088.o(.text._ZN6BMI088D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BMI088::~BMI088()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ahrs.o(.text._ZN6BMI0888instanceEv)
</UL>
<P><STRONG><a name="[347]"></a>BMI088::~BMI088__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, bmi088.o(.text._ZN6BMI088D2Ev), UNUSED)

<P><STRONG><a name="[d8]"></a>GM2006::setOutput()</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, gm2006.o(.text._ZN6GM20069setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GM2006::setOutput() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::run()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm2006.o(.rodata._ZTV6GM2006)
</UL>
<P><STRONG><a name="[2a1]"></a>GM2006::GM2006()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gm2006.o(.text._ZN6GM2006C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GM2006::GM2006() &rArr; GMMotor::GMMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::ShooterController__sub_object()
</UL>

<P><STRONG><a name="[348]"></a>GM2006::GM2006__sub_object()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gm2006.o(.text._ZN6GM2006C2Ev), UNUSED)

<P><STRONG><a name="[2a2]"></a>GM2006::~GM2006()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gm2006.o(.text._ZN6GM2006D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GM2006::~GM2006()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::~ShooterController__sub_object()
</UL>

<P><STRONG><a name="[349]"></a>GM2006::~GM2006__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gm2006.o(.text._ZN6GM2006D2Ev), UNUSED)

<P><STRONG><a name="[d9]"></a>GM3508::setOutput()</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, gm3508.o(.text._ZN6GM35089setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GM3508::setOutput() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::run()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm3508.o(.rodata._ZTV6GM3508)
</UL>
<P><STRONG><a name="[2a0]"></a>GM3508::GM3508()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gm3508.o(.text._ZN6GM3508C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GM3508::GM3508() &rArr; GMMotor::GMMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::ShooterController__sub_object()
</UL>

<P><STRONG><a name="[34a]"></a>GM3508::GM3508__sub_object()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gm3508.o(.text._ZN6GM3508C2Ev), UNUSED)

<P><STRONG><a name="[2a3]"></a>GM3508::~GM3508()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gm3508.o(.text._ZN6GM3508D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GM3508::~GM3508()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::~ShooterController__sub_object()
</UL>

<P><STRONG><a name="[34b]"></a>GM3508::~GM3508__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gm3508.o(.text._ZN6GM3508D2Ev), UNUSED)

<P><STRONG><a name="[da]"></a>GM6020::setOutput()</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, gm6020.o(.text._ZN6GM60209setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GM6020::setOutput() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm6020.o(.rodata._ZTV6GM6020)
</UL>
<P><STRONG><a name="[278]"></a>GM6020::GM6020()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gm6020.o(.text._ZN6GM6020C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GM6020::GM6020() &rArr; GMMotor::GMMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotor::GMMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::GimbalController__sub_object()
</UL>

<P><STRONG><a name="[34c]"></a>GM6020::GM6020__sub_object()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gm6020.o(.text._ZN6GM6020C2Ev), UNUSED)

<P><STRONG><a name="[27f]"></a>GM6020::~GM6020()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gm6020.o(.text._ZN6GM6020D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GM6020::~GM6020()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::~GimbalController__sub_object()
</UL>

<P><STRONG><a name="[34d]"></a>GM6020::~GM6020__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gm6020.o(.text._ZN6GM6020D2Ev), UNUSED)

<P><STRONG><a name="[db]"></a>LK8016::setOutput()</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, lk8016.o(.text._ZN6LK80169setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LK8016::setOutput() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::FloatConstrain(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lk8016.o(.rodata._ZTV6LK8016)
</UL>
<P><STRONG><a name="[287]"></a>LK8016::LK8016()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lk8016.o(.text._ZN6LK8016C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LK8016::LK8016() &rArr; LKMotor::LKMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
</UL>

<P><STRONG><a name="[34e]"></a>LK8016::LK8016__sub_object()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lk8016.o(.text._ZN6LK8016C2Ev), UNUSED)

<P><STRONG><a name="[290]"></a>LK8016::~LK8016()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lk8016.o(.text._ZN6LK8016D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LK8016::~LK8016()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
</UL>

<P><STRONG><a name="[34f]"></a>LK8016::~LK8016__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lk8016.o(.text._ZN6LK8016D2Ev), UNUSED)

<P><STRONG><a name="[dc]"></a>LK9025::setOutput()</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, lk9025.o(.text._ZN6LK90259setOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LK9025::setOutput() &rArr; Pid::UpdateResult() &rArr; Math::LimitMax(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::FloatConstrain(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lk9025.o(.rodata._ZTV6LK9025)
</UL>
<P><STRONG><a name="[286]"></a>LK9025::LK9025()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lk9025.o(.text._ZN6LK9025C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LK9025::LK9025() &rArr; LKMotor::LKMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetUpdatePeriod(float)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::SetTau(float)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::BalanceController__sub_object()
</UL>

<P><STRONG><a name="[350]"></a>LK9025::LK9025__sub_object()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lk9025.o(.text._ZN6LK9025C2Ev), UNUSED)

<P><STRONG><a name="[291]"></a>LK9025::~LK9025()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lk9025.o(.text._ZN6LK9025D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LK9025::~LK9025()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::~BalanceController__sub_object()
</UL>

<P><STRONG><a name="[351]"></a>LK9025::~LK9025__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lk9025.o(.text._ZN6LK9025D2Ev), UNUSED)

<P><STRONG><a name="[2ce]"></a>GMMotor::GMMotor__sub_object()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gm2006.o(.text._ZN7GMMotorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GMMotor::GMMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020::GM6020()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM3508::GM3508()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM2006::GM2006()
</UL>

<P><STRONG><a name="[2d0]"></a>IST8310::init()</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, ist8310.o(.text._ZN7IST83104initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IST8310::init() &rArr; IST8310::readReg(unsigned char, unsigned char*, unsigned short) &rArr; iic_readData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::readReg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::wirteReg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[2d1]"></a>IST8310::readReg(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ist8310.o(.text._ZN7IST83107readRegEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IST8310::readReg(unsigned char, unsigned char*, unsigned short) &rArr; iic_readData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
</UL>

<P><STRONG><a name="[2d4]"></a>IST8310::instance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cpp_solution.o(.text._ZN7IST83108instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IST8310::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::IST8310()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
</UL>

<P><STRONG><a name="[2d2]"></a>IST8310::wirteReg(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ist8310.o(.text._ZN7IST83108wirteRegEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IST8310::wirteReg(unsigned char, unsigned char*, unsigned short) &rArr; iic_writeData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
</UL>

<P><STRONG><a name="[2d5]"></a>IST8310::IST8310()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ist8310.o(.text._ZN7IST8310C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IST8310::IST8310()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::instance()
</UL>

<P><STRONG><a name="[352]"></a>IST8310::IST8310__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ist8310.o(.text._ZN7IST8310C2Ev), UNUSED)

<P><STRONG><a name="[91]"></a>IST8310::~IST8310()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ist8310.o(.text._ZN7IST8310D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IST8310::~IST8310()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_solution.o(.text._ZN7IST83108instanceEv)
</UL>
<P><STRONG><a name="[353]"></a>IST8310::~IST8310__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ist8310.o(.text._ZN7IST8310D2Ev), UNUSED)

<P><STRONG><a name="[2cf]"></a>LKMotor::LKMotor__sub_object()</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lk8016.o(.text._ZN7LKMotorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LKMotor::LKMotor__sub_object() &rArr; Pid::Pid()
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK9025::LK9025()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LK8016::LK8016()
</UL>

<P><STRONG><a name="[2bc]"></a>std::__2::__math::fmod[abi:nn190000](float, float)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lkmotorhandler.o(.text._ZNSt3__26__math4fmodB8nn190000Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LoopFloatConstrain(float, float, float)
</UL>

<P><STRONG><a name="[92]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gm2006.o(.rodata._ZTV7GMMotor)
<LI> lk8016.o(.rodata._ZTV7LKMotor)
<LI> gimbalstatefps.o(.rodata._ZTV10Controller)
</UL>
<P><STRONG><a name="[2d8]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[20f]"></a>ahrs_update</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpp_solution.o(.text.ahrs_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = ahrs_update &rArr; AHRS::AHRS_Update() &rArr; IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS_Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>arm_atan2_f32</STRONG> (Thumb, 1252 bytes, Stack size 136 bytes, fastmathfunctions.o(.text.arm_atan2_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arm_atan2_f32 &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbitf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
</UL>

<P><STRONG><a name="[249]"></a>arm_cos_f32</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, fastmathfunctions.o(.text.arm_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[1d9]"></a>arm_mat_add_f32</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, matrixfunctions.o(.text.arm_mat_add_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate
</UL>

<P><STRONG><a name="[1d2]"></a>arm_mat_init_f32</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, matrixfunctions.o(.text.arm_mat_init_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_mat_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
</UL>

<P><STRONG><a name="[1da]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 1532 bytes, Stack size 236 bytes, matrixfunctions.o(.text.arm_mat_inverse_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
</UL>

<P><STRONG><a name="[1d8]"></a>arm_mat_mult_f32</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, matrixfunctions.o(.text.arm_mat_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::LQRCal(float*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate
</UL>

<P><STRONG><a name="[1dc]"></a>arm_mat_sub_f32</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, matrixfunctions.o(.text.arm_mat_sub_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::LQRCal(float*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
</UL>

<P><STRONG><a name="[1d7]"></a>arm_mat_trans_f32</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, matrixfunctions.o(.text.arm_mat_trans_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
</UL>

<P><STRONG><a name="[2a4]"></a>arm_quaternion_product_f32</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, quaternionmathfunctions.o(.text.arm_quaternion_product_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arm_quaternion_product_f32 &rArr; arm_quaternion_product_single_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quaternion_product_single_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2db]"></a>arm_quaternion_product_single_f32</STRONG> (Thumb, 292 bytes, Stack size 12 bytes, quaternionmathfunctions.o(.text.arm_quaternion_product_single_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_quaternion_product_single_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quaternion_product_f32
</UL>

<P><STRONG><a name="[248]"></a>arm_sin_f32</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, fastmathfunctions.o(.text.arm_sin_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
</UL>

<P><STRONG><a name="[2dc]"></a>bsp_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(.text.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_init &rArr; can_filter_init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[12e]"></a>can_callback_cpp</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, cpp_solution.o(.text.can_callback_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = can_callback_cpp &rArr; LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int) &rArr; LKMotorHandler::updateFeedback() &rArr; Math::LoopFloatConstrain(float, float, float) &rArr; std::__2::__math::fmod[abi:nn190000](float, float) &rArr; __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::processRawData(CAN_HandleTypeDef*, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[2dd]"></a>can_filter_init</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, bsp_can.o(.text.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_filter_init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[26a]"></a>can_sendData</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, bsp_can.o(.text.can_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_sendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::sendControlData(CAN_HandleTypeDef*, CAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[2bb]"></a>get_remote_control_raw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, remotecontrol.o(.text.get_remote_control_raw))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
</UL>

<P><STRONG><a name="[2de]"></a>gpio_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[2d3]"></a>iic_readData</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, bsp_iic.o(.text.iic_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = iic_readData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::readReg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[2d6]"></a>iic_writeData</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, bsp_iic.o(.text.iic_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iic_writeData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::wirteReg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[ef]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = main &rArr; main_demo &rArr; BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ALL_ON
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSystickIT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e4]"></a>main_demo</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, cpp_main.o(.text.main_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = main_demo &rArr; BMI088::BMI088_INIT() &rArr; BMI088::VerifyGyroChipID() &rArr; BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char) &rArr; spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::init()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::BMI088_INIT()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::init()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::init()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::init()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::init()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::INS_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>process_remote_control_data</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, remotecontrol.o(.text.process_remote_control_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_remote_control_data &rArr; SBUS_TO_RC
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_TO_RC
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[2e6]"></a>remote_control_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, remotecontrol.o(.text.remote_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = remote_control_init &rArr; usart3_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_demo
</UL>

<P><STRONG><a name="[2c8]"></a>spi_readData</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp_spi.o(.text.spi_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = spi_readData &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2c7]"></a>spi_sendData</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp_spi.o(.text.spi_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = spi_sendData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_IT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::ReadDataFromReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::WriteDataToReg(BMI088_SENSOR, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[255]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::instance()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::instance()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::instance()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::instance()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
</UL>

<P><STRONG><a name="[257]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::instance()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::instance()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::instance()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::instance()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
</UL>

<P><STRONG><a name="[2e8]"></a>usart3_init</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, bsp_usart.o(.text.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init
</UL>

<P><STRONG><a name="[2ee]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1db]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[1d6]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[1d5]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[2b3]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[2d7]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__math::fmod[abi:nn190000](float, float)
</UL>

<P><STRONG><a name="[24d]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_roundf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CONTROL::LQR::refreshLQRK(float)
</UL>

<P><STRONG><a name="[2b4]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::InitQuaternion(float*)
</UL>

<P><STRONG><a name="[24a]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceStandControl::enter()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2ec]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2f0]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[2ed]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2ef]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2f1]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[2eb]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>

<P><STRONG><a name="[2f4]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
</UL>

<P><STRONG><a name="[2f7]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
</UL>

<P><STRONG><a name="[2fa]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2f6]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2f9]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>

<P><STRONG><a name="[2fb]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve(float, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceRemoteControl::enter()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalStateFPS::init()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::init()
</UL>

<P><STRONG><a name="[2fd]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2fe]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[e4]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[354]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[355]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2f2]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, frem_clz.o(x$fpl$frem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[2f5]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2f3]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ea]"></a>MX_GPIO_Init</STRONG> (Thumb, 526 bytes, Stack size 104 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>MX_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, main.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>MX_CAN1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(.text.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>MX_CAN2_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(.text.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>MX_I2C3_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>MX_SPI1_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>MX_TIM1_Init</STRONG> (Thumb, 366 bytes, Stack size 104 bytes, main.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f1]"></a>MX_TIM2_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, main.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>MX_TIM4_Init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, main.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>MX_TIM5_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, main.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>MX_TIM8_Init</STRONG> (Thumb, 368 bytes, Stack size 104 bytes, main.o(.text.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>MX_TIM10_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, main.o(.text.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>MX_CRC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(.text.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(.text.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, stm32f4xx_hal_pcd.o(.text.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>USB_CoreReset</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[134]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[135]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[137]"></a>DMA_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[14d]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[14a]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[14b]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[14c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[149]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1a2]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[13d]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[142]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[143]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1cd]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[1ce]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>

<P><STRONG><a name="[13f]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[141]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[13e]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1a0]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[209]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, stm32f4xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[19a]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>

<P><STRONG><a name="[80]"></a>SPI_TxISR_16BIT</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_TxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_TxISR_16BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[81]"></a>SPI_TxISR_8BIT</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_TxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_TxISR_8BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[204]"></a>SPI_CloseTx_ISR</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_CloseTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_CloseTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
</UL>

<P><STRONG><a name="[76]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[77]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[7a]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_2linesRxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[7b]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_2linesTxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[7c]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_2linesRxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[7d]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_2linesTxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[203]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_CloseRx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_CloseRx_ISR &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
</UL>

<P><STRONG><a name="[1ff]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_CloseRxTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
</UL>

<P><STRONG><a name="[7e]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfTransmitCplt &rArr; HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[7f]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[75]"></a>SPI_DMAError</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAError &rArr; HAL_SPI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
<LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[73]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfReceiveCplt &rArr; HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[74]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[78]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt &rArr; HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[79]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[1b5]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1b7]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1b8]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1a9]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1aa]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1ca]"></a>UART_SetConfig</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c2]"></a>UART_EndRxTransfer</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>UART_Receive_IT</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1c6]"></a>UART_Transmit_IT</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32f4xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>SBUS_TO_RC</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, remotecontrol.o(.text.SBUS_TO_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SBUS_TO_RC
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_remote_control_data
</UL>

<P><STRONG><a name="[1cb]"></a>H_K_R_Adjustment</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, kalman_filter.o(.text.H_K_R_Adjustment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = H_K_R_Adjustment &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
</UL>

<P><STRONG><a name="[83]"></a>IMU_QuaternionEKF_Observe</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Observe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IMU_QuaternionEKF_Observe &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[84]"></a>IMU_QuaternionEKF_F_Linearization_P_Fading</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_F_Linearization_P_Fading))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IMU_QuaternionEKF_F_Linearization_P_Fading &rArr; invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[85]"></a>IMU_QuaternionEKF_SetH</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_SetH))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_SetH
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[86]"></a>IMU_QuaternionEKF_xhatUpdate</STRONG> (Thumb, 1632 bytes, Stack size 32 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_xhatUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = IMU_QuaternionEKF_xhatUpdate &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[1cf]"></a>invSqrt</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, quaternionekf.o(.text.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_F_Linearization_P_Fading
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[117]"></a>DWT_CNT_Update</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, bsp_dwt.o(.text.DWT_CNT_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DWT_CNT_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaT
</UL>

<P><STRONG><a name="[237]"></a>__cxx_global_var_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gimbalstatefps.o(.text.__cxx_global_var_init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_GimbalStateFPS.cpp
</UL>

<P><STRONG><a name="[dd]"></a>_GLOBAL__sub_I_GimbalStateFPS.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gimbalstatefps.o(.text._GLOBAL__sub_I_GimbalStateFPS.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GLOBAL__sub_I_GimbalStateFPS.cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalstatefps.o(.init_array)
</UL>
<P><STRONG><a name="[238]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init &rArr; GMMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMMotorHandler::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[239]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.1 &rArr; LKMotorHandler::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorHandler::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[23a]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.2 &rArr; Dr16::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[23b]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.3 &rArr; BMI088::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[23c]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.4 &rArr; IST8310::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[23d]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.5 &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardConnectivity::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[23e]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.6 &rArr; AHRS::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[23f]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.7 &rArr; ChassisController::instance() &rArr; ChassisController::ChassisController__sub_object() &rArr; ChassisController::init() &rArr; ChassisStateRelax::init() &rArr; BoardConnectivity::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[240]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.8 &rArr; GimbalController::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalController::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[241]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.9 &rArr; ShooterController::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShooterController::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[242]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpp_main.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.10 &rArr; BalanceController::instance() &rArr; BalanceController::BalanceController__sub_object() &rArr; BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*) &rArr; cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceController::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpp_main.cpp
</UL>

<P><STRONG><a name="[de]"></a>_GLOBAL__sub_I_cpp_main.cpp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cpp_main.o(.text._GLOBAL__sub_I_cpp_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_cpp_main.cpp &rArr; __cxx_global_var_init.10 &rArr; BalanceController::instance() &rArr; BalanceController::BalanceController__sub_object() &rArr; BalanceRemoteControl::BalanceRemoteControl__sub_object(LK9025*, LK9025*, LK8016*, LK8016*, LK8016*, LK8016*) &rArr; cVelFusionKF::cVelFusionKF__sub_object() &rArr; Kalman_Filter_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpp_main.o(.init_array)
</UL>
<P><STRONG><a name="[11]"></a>CDC_Init_FS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[12]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[13]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[14]"></a>CDC_Receive_FS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CDC_Receive_FS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[15]"></a>CDC_TransmitCplt_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_TransmitCplt_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7]"></a>USBD_CDC_Init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[8]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_cdc.o(.text.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[9]"></a>USBD_CDC_Setup</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[a]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_cdc.o(.text.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[b]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbd_cdc.o(.text.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_cdc.o(.text.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_DataOut &rArr; USBD_LL_GetRxDataSize &rArr; HAL_PCD_EP_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_GetHSCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_GetFSCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[f]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[2d9]"></a>__ARM_signbitf</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fastmathfunctions.o(.text.__ARM_signbitf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_signbitf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>

<P><STRONG><a name="[2da]"></a>__ARM_signbit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fastmathfunctions.o(.text.__ARM_signbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_signbit
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>

<P><STRONG><a name="[2fc]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[2f8]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
